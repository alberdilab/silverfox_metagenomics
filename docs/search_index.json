[["index.html", "AlberdiLab | Silver fox metagenomics MSc project Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Silver fox metagenomics MSc project Irene Martínez, M Thomas P Gilbert, Antton Alberdi1 Last update: 2025-10-17 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of Belyayev tame and aggressive silverfoxes. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/silverfox_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) library(janitor) library(broom) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) library(viridis) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(distillR) library(ANCOMBC) library(lme4) library(nlme) library(pairwiseAdonis) library(emmeans) library(pheatmap) library(rstatix) library(uwot) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% rename(sample =1, gut_location = 2, fox_behaviour = 3, fox_sex = 4, sample_type = 5, year = 6) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/counts.tsv&quot;) %&gt;% rename(genome=1)%&gt;% select(any_of(c(&quot;genome&quot;, sample_metadata$sample))) 2.1.3 Filter read counts read_counts_filt &lt;- read_counts %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.4 Genome info genome_info &lt;- read_csv(&quot;data/genomeInfo.csv&quot;) %&gt;% mutate(genome = gsub(&quot;.fa$&quot;, &quot;&quot;, genome)) %&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.5 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/genome_taxonomy.tsv&quot;) %&gt;% rename(genome = 1) genome_taxonomy_expanded &lt;- genome_taxonomy %&gt;% separate(classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;, fill = &quot;right&quot;, remove = FALSE) %&gt;% mutate(across(domain:species, ~ str_replace(.x, &quot;^[a-z]__&quot;, &quot;&quot;)))%&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.6 Genome metadata genome_metadata &lt;- genome_taxonomy_expanded %&gt;% left_join(genome_info, by = &quot;genome&quot;) 2.1.7 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/bases.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% left_join(genome_info %&gt;% select(genome, length), by = &quot;genome&quot;) %&gt;% mutate(across(where(is.numeric), ~ .x / length)) 2.1.8 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.9 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/gene_annotations.tsv.xz&quot;) %&gt;% mutate(genome = sub(&quot;\\\\^.*&quot;, &quot;&quot;, gene)) %&gt;% select(1, genome, everything()) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% select(-length) %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol= 2, annotcol=c(6,7,8,9), verbosity = F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) location_colors &lt;- c(&#39;#9467bd&#39;,&#39;#7b3294&#39;,&#39;#ff7f0e&#39;,&#39;#e66101&#39;,&#39;#BFA366&#39;,&#39;#6E5244&#39;) behaviour_colors &lt;- c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot; ) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_annotations, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, location_colors, behaviour_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 Filtering", " Chapter 3 Data statistics 3.1 Sequencing reads statistics load(&quot;data/data.Rdata&quot;) 3.1.1 Loading data preprocessing &lt;- read_tsv(&quot;data/preprocessing.tsv&quot;) Rows: 48 Columns: 9 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): sample dbl (8): reads_raw, reads_discarded, reads_host, reads_metagenomic, bases_raw, bases_discarded, bases_host, b... ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Total number of bases sequenced (Gb) preprocessing %&gt;% summarise(Total=sum(reads_metagenomic * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_metagenomic * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_metagenomic * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_gj58mq3d2mcqtubtpcq1, .table th.tinytable_css_gj58mq3d2mcqtubtpcq1 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_mvfw41k1nwc5tyvt4srh, .table th.tinytable_css_mvfw41k1nwc5tyvt4srh { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Total Average 96.56 2.01 ± 2.86 How many samples do we have of each group (behaviour)? sample_metadata %&gt;% group_by(fox_behaviour) %&gt;% summarize(n_samples = n()) %&gt;% tt() .table td.tinytable_css_novsrc3dmy6x1o7hwm6u, .table th.tinytable_css_novsrc3dmy6x1o7hwm6u { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_15kmx2ojai5lz8p1pmf8, .table th.tinytable_css_15kmx2ojai5lz8p1pmf8 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } fox_behaviour n_samples aggr 20 tame 20 unsel 8 How many MAGs? genome_metadata %&gt;% summarize(n_genomes = n())%&gt;% tt() .table td.tinytable_css_3h7ob2oh4er8jn9i4cff, .table th.tinytable_css_3h7ob2oh4er8jn9i4cff { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_szn7wb46clr3xjwhj5me, .table th.tinytable_css_szn7wb46clr3xjwhj5me { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } n_genomes 143 genome_metadata %&gt;% summarise( mean_c = mean(completeness, na.rm = TRUE) %&gt;% round(2), sd_c = sd(completeness, na.rm = TRUE) %&gt;% round(2), mean_con = mean(contamination, na.rm = TRUE) %&gt;% round(2), sd_con = sd(contamination, na.rm = TRUE) %&gt;% round(2) ) %&gt;% unite(&quot;Completeness&quot;, mean_c, sd_c, sep = &quot; ± &quot;) %&gt;% unite(&quot;Contamination&quot;, mean_con, sd_con, sep = &quot; ± &quot;) %&gt;% tt() .table td.tinytable_css_3xy7yk7uzknhhkg4nxy7, .table th.tinytable_css_3xy7yk7uzknhhkg4nxy7 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_gv90dtzhbcpohvhg50a8, .table th.tinytable_css_gv90dtzhbcpohvhg50a8 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Completeness Contamination 92.6 ± 6.75 1.92 ± 2.11 3.1.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(preprocessing, by = join_by(sample == sample)) %&gt;% dplyr::select(sample,mags,bases_metagenomic,bases_host ,bases_discarded, bases_raw) %&gt;% mutate(mags_bases = mags*146) %&gt;% #total number of bases mapped to mags (multiplying by effective read length) mutate(bases_discarded_proportion = bases_discarded/bases_raw) %&gt;% mutate(lowqual_bases = ((bases_metagenomic+bases_host)/(1-bases_discarded_proportion))-(bases_metagenomic+bases_host)) %&gt;% mutate(unmapped_bases = bases_metagenomic - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) sequence_fractions %&gt;% dplyr::select(sample, lowqual_bases, bases_host, unmapped_bases, mags_bases) %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_qdb2qv1uadz4t1jq7ppr, .table th.tinytable_css_qdb2qv1uadz4t1jq7ppr { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_sf6n1j633coc7a3k0dm0, .table th.tinytable_css_sf6n1j633coc7a3k0dm0 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Sample Low quality Mapped to host Unmapped Mapped to MAGs fox10_D_37 2.6301023 8.1216298 0.88459923 1.65543326 fox10_F_39 2.2970487 2.8406966 2.77779874 4.80441528 fox10_K_38 0.5180657 8.8218626 0.04823171 0.05601246 fox10_M_40 0.5131760 9.5470219 0.22409171 0.36565627 fox14_D_1 1.5586674 7.5129415 0.20575144 0.47793027 fox14_F_3 3.0494709 3.4435576 1.62980735 3.32223394 fox14_K_2 0.5995430 5.6724002 0.02957405 0.03470770 fox14_M_4 0.3790174 5.2019894 0.03456248 0.04290575 fox16_D_33 1.8642653 16.0480617 0.11617587 0.11494288 fox16_F_35 1.8038610 8.1444304 1.65409742 3.60815903 fox16_K_34 0.8935251 6.1766422 0.03076079 0.03541931 fox16_M_36 0.7906496 7.2696400 0.04106251 0.06308295 fox1_D_17 1.0365225 9.5821911 0.41629582 0.68272520 fox1_K_18 1.2751933 13.7506079 0.07496196 0.10288401 fox1_M_20 0.3523016 2.9740678 0.01786800 0.02319049 fox22_D_29 0.8179759 3.9995783 1.18966373 7.16354957 fox22_F_31 1.2420612 0.5808306 3.04907749 6.16145112 fox22_K_30 1.4172912 10.1558721 0.05224991 0.06107603 fox22_M_32 0.7611953 9.4840202 0.31379754 0.58815662 fox24_D_5 2.2316394 10.1593674 0.12140898 0.47912002 fox24_F_7 1.4618429 7.2107388 0.35280228 0.64631557 fox24_K_6 0.5889175 11.1312892 0.05502918 0.06345175 fox24_M_8 0.5168462 9.9273909 0.05831746 0.08046586 fox26_D_41 4.8972087 11.8114623 0.57036670 0.15562082 fox26_F_43 3.2084935 4.3609827 2.43630187 2.91103049 fox26_K_42 0.5383661 9.6877966 0.06740662 0.06352402 fox26_M_44 0.8497864 11.0920109 0.28636408 0.43980879 fox29_D_9 2.7560848 7.8789344 0.17264936 0.36172230 fox29_F_11 1.5935373 5.6150417 0.70333918 0.93580540 fox29_K_10 0.8593511 6.4283843 0.03036465 0.03872504 fox29_M_12 0.6192141 5.8888423 0.03290705 0.04689389 fox30_D_13 3.7178316 9.4089714 0.63316607 0.37918361 fox30_F_15 1.5528117 4.8552355 2.51266195 3.40603999 fox30_K_14 0.5678181 9.7021594 0.05598970 0.06023989 fox30_M_16 0.7024185 10.0939226 0.29300930 0.44862749 fox3_D_25 1.7112057 13.1973431 0.18071781 0.38979255 fox3_F_27 1.5159373 2.0277157 1.24050570 2.83525985 fox3_M_28 1.4034647 7.1535047 0.04753161 0.08069362 fox5_D_10 2.7287199 13.6063868 0.61487849 1.54580318 fox5_F_12 1.8250414 4.3329962 1.55799919 3.72590584 fox5_K_11 0.3455828 3.3354846 0.01929405 0.01995294 fox5_M_9 0.2979118 3.3643827 0.02800099 0.02913255 fox8_D_21 2.3661247 4.0665726 2.66481434 5.19974240 fox8_F_23 2.5074581 2.2107557 2.67704976 4.26260403 fox8_K_22 0.6695787 11.3845138 0.07137123 0.08182030 fox8_M_24 0.5294341 9.9194827 0.17877318 0.33240900 #mean sequence_fractions %&gt;% dplyr::select(sample, lowqual_bases, bases_host, unmapped_bases, mags_bases) %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() Warning: There was 1 warning in `summarise()`. ℹ In argument: `across(where(is.numeric), mean, na.rm = TRUE)`. Caused by warning: ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0. Supply arguments directly to `.fns` through an anonymous function instead. # Previously across(a:b, mean, na.rm = TRUE) # Now across(a:b, \\(x) mean(x, na.rm = TRUE)) .table td.tinytable_css_r0v67pkjpih4l0bcvfwu, .table th.tinytable_css_r0v67pkjpih4l0bcvfwu { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_wg16a39g6dl8i0q09u1k, .table th.tinytable_css_wg16a39g6dl8i0q09u1k { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Low quality Mapped to host Unmapped Mapped to MAGs 1.442664 7.590863 0.6620315 1.269209 #SD sequence_fractions %&gt;% dplyr::select(sample, lowqual_bases, bases_host, unmapped_bases, mags_bases) %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), sd, na.rm = TRUE)) %&gt;% tt() .table td.tinytable_css_fxj42aj3g6wlla5x2ox4, .table th.tinytable_css_fxj42aj3g6wlla5x2ox4 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_mkm8un2qnnhqxtqeoslb, .table th.tinytable_css_mkm8un2qnnhqxtqeoslb { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Low quality Mapped to host Unmapped Mapped to MAGs 1.023265 3.559173 0.9109667 1.876046 sequence_fractions_plot &lt;- sequence_fractions %&gt;% dplyr::select(sample, lowqual_bases, bases_host, unmapped_bases, mags_bases) %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) ggplot(sequence_fractions_plot, aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) sequence_fractions_type &lt;- sequence_fractions_plot %&gt;% left_join(sample_metadata) ggplot(sequence_fractions_type, aes(x = sample, y = value, fill = fraction)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name = &quot;Sequence type&quot;, breaks = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels = c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values = c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;)) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;bottom&quot;) + facet_wrap(~ sample_type, scales = &quot;free_x&quot;, nrow = 1) ggplot(sequence_fractions_type, aes(x = sample, y = value, fill = fraction)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name = &quot;Sequence type&quot;, breaks = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels = c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values = c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;)) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;bottom&quot;) + facet_wrap(~ gut_location, scales = &quot;free_x&quot;, nrow = 1) ggplot(sequence_fractions_type, aes(x = sample, y = value, fill = fraction)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name = &quot;Sequence type&quot;, breaks = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels = c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values = c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;)) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;bottom&quot;) + facet_nested(~ sample_type + gut_location, scales = &quot;free_x&quot;, space = &quot;free_x&quot;) ggplot(sequence_fractions_type, aes(x = sample, y = value, fill = fraction)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name = &quot;Sequence type&quot;, breaks = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels = c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values = c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;)) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;bottom&quot;) + facet_wrap(~ fox_behaviour, scales = &quot;free_x&quot;, nrow = 1) 3.2 Filtering To remove samples with high host data or low metagenomic data host_data_plot &lt;- sequence_fractions %&gt;% left_join(sample_metadata) %&gt;% mutate(host_fraction = bases_host / bases_raw, sample = reorder(sample, -host_fraction)) #reorder by decreasing host_fraction Joining with `by = join_by(sample)` ggplot(host_data_plot,aes(x = sample, y = host_fraction, fill = gut_location)) + geom_col() + scale_fill_manual( values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot; ) )+ geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;black&quot;)+ labs(y = &quot;Host fraction&quot;, x = &quot;Sample&quot;, title = &quot;Fraction of host bases per sample&quot;)+ theme_bw() + theme( axis.text.x = element_text(angle = 90, hjust = 1) ) threshold &lt;- 0.5 samples_to_remove &lt;- host_data_plot %&gt;% filter(host_fraction &gt; threshold) %&gt;% pull(sample) samples_to_remove [1] fox10_D_37 fox10_K_38 fox10_M_40 fox14_D_1 fox14_K_2 fox14_M_4 fox16_D_33 fox16_F_35 fox16_K_34 [10] fox16_M_36 fox1_D_17 fox1_K_18 fox1_M_20 fox22_K_30 fox22_M_32 fox24_D_5 fox24_F_7 fox24_K_6 [19] fox24_M_8 fox26_D_41 fox26_K_42 fox26_M_44 fox29_D_9 fox29_F_11 fox29_K_10 fox29_M_12 fox30_D_13 [28] fox30_K_14 fox30_M_16 fox3_D_25 fox3_M_28 fox5_D_10 fox5_K_11 fox5_M_9 fox8_K_22 fox8_M_24 attr(,&quot;scores&quot;) fox1_D_17 fox1_K_18 fox1_M_20 fox10_D_37 fox10_F_39 fox10_K_38 fox10_M_40 fox14_D_1 fox14_F_3 fox14_K_2 -0.8115655 -0.8981025 -0.8761180 -0.6046012 -0.2216993 -0.9191864 -0.8715206 -0.7659288 -0.2999397 -0.8854033 fox14_M_4 fox16_D_33 fox16_F_35 fox16_K_34 fox16_M_36 fox22_D_29 fox22_F_31 fox22_K_30 fox22_M_32 fox24_D_5 -0.9109764 -0.8774608 -0.5329078 -0.8579955 -0.8821516 -0.3019548 -0.0524776 -0.8576919 -0.8299505 -0.7748819 fox24_F_7 fox24_K_6 fox24_M_8 fox26_D_41 fox26_F_43 fox26_K_42 fox26_M_44 fox29_D_9 fox29_F_11 fox29_K_10 -0.7307543 -0.9258449 -0.9190592 -0.6490895 -0.3298888 -0.9090424 -0.8483041 -0.7013799 -0.6212880 -0.8665419 fox29_M_12 fox3_D_25 fox3_F_27 fox3_M_28 fox30_D_13 fox30_F_15 fox30_K_14 fox30_M_16 fox5_D_10 fox5_F_12 -0.8858230 -0.8468042 -0.2655088 -0.8165677 -0.6407747 -0.3802882 -0.9141509 -0.8583687 -0.7319965 -0.3761559 fox5_K_11 fox5_M_9 fox8_D_21 fox8_F_23 fox8_K_22 fox8_M_24 -0.8893286 -0.8956104 -0.2836635 -0.1883364 -0.9188259 -0.8814484 46 Levels: fox24_K_6 fox10_K_38 fox24_M_8 fox8_K_22 fox30_K_14 fox14_M_4 fox26_K_42 fox1_K_18 ... fox22_F_31 host_data_plot &lt;- sequence_fractions %&gt;% left_join(sample_metadata) %&gt;% mutate(host_fraction = bases_host / bases_raw, bases_metagenomic_GB = bases_metagenomic / 1e9, sample = reorder(sample, -bases_metagenomic)) #reorder by decreasing bases Joining with `by = join_by(sample)` ggplot(host_data_plot,aes(x = sample, y = bases_metagenomic_GB, fill = gut_location)) + geom_col() + scale_fill_manual( values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot; ) )+ geom_hline(yintercept = 1, linetype = &quot;dashed&quot;, color = &quot;black&quot;)+ labs(y = &quot;Metagenomic bases (Gb)&quot;, x = &quot;Sample&quot;, title = &quot;GB of metagenomic bases per sample&quot;)+ theme_bw() + scale_y_continuous( breaks = seq(0, max(host_data_plot$bases_metagenomic_GB), by = 1) ) + theme( axis.text.x = element_text(angle = 90, hjust = 1) ) ggplot(host_data_plot, aes(x= host_fraction, y= bases_metagenomic_GB, color = gut_location))+ scale_color_manual( values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot; ))+ scale_y_continuous( breaks = seq(0, max(host_data_plot$bases_metagenomic_GB), by = 1) ) + geom_hline(yintercept = 1, linetype = &quot;dashed&quot;, color = &quot;black&quot;)+ geom_vline(xintercept = 0.75, linetype = &quot;dashed&quot;, color = &quot;black&quot;)+ labs(y = &quot;Metagenomic Bases&quot;, x = &quot;Host fraction&quot;)+ geom_point()+ theme_bw() samples_to_remove_total &lt;- host_data_plot %&gt;% filter(bases_metagenomic_GB &lt; 1) %&gt;% #remove samples with less than 1Gb of metagenomic reads filter(host_fraction &gt; 0.75) %&gt;% #remove samples with more than 0.75 host fraction pull(sample) samples_to_remove_total [1] fox10_K_38 fox10_M_40 fox14_D_1 fox14_K_2 fox14_M_4 fox16_D_33 fox16_K_34 fox16_M_36 fox1_K_18 [10] fox1_M_20 fox22_K_30 fox22_M_32 fox24_D_5 fox24_K_6 fox24_M_8 fox26_K_42 fox26_M_44 fox29_K_10 [19] fox29_M_12 fox30_K_14 fox30_M_16 fox3_D_25 fox3_M_28 fox5_K_11 fox5_M_9 fox8_K_22 fox8_M_24 attr(,&quot;scores&quot;) fox1_D_17 fox1_K_18 fox1_M_20 fox10_D_37 fox10_F_39 fox10_K_38 fox10_M_40 fox14_D_1 fox14_F_3 -1099021021 -177845966 -41058495 -2540032497 -7582214024 -104244170 -589747982 -683681706 -4952041291 fox14_K_2 fox14_M_4 fox16_D_33 fox16_F_35 fox16_K_34 fox16_M_36 fox22_D_29 fox22_F_31 fox22_K_30 -64281749 -77468230 -231118746 -5262256451 -66180098 -104145463 -8353213301 -9210528613 -113325947 fox22_M_32 fox24_D_5 fox24_F_7 fox24_K_6 fox24_M_8 fox26_D_41 fox26_F_43 fox26_K_42 fox26_M_44 -901954156 -600529006 -999117854 -118480924 -138783312 -725987517 -5347332359 -130930631 -726172874 fox29_D_9 fox29_F_11 fox29_K_10 fox29_M_12 fox3_D_25 fox3_F_27 fox3_M_28 fox30_D_13 fox30_F_15 -534371657 -1639144575 -69089686 -79800931 -570510362 -4075765550 -128225225 -1012349683 -5918701937 fox30_K_14 fox30_M_16 fox5_D_10 fox5_F_12 fox5_K_11 fox5_M_9 fox8_D_21 fox8_F_23 fox8_K_22 -116229592 -741636782 -2160681671 -5283905027 -39246993 -57133542 -7864556744 -6939653783 -153191527 fox8_M_24 -511182182 46 Levels: fox22_F_31 fox22_D_29 fox8_D_21 fox10_F_39 fox8_F_23 fox30_F_15 fox26_F_43 fox5_F_12 ... fox5_K_11 #Add samples to remove to the Rdata save(samples_to_remove_total, file = &quot;data.RData&quot;) host_data_filtered &lt;- host_data_plot %&gt;% filter(!sample %in% samples_to_remove_total) %&gt;% mutate(host_fraction = bases_host / bases_raw, sample = reorder(sample, -host_fraction)) ggplot(host_data_filtered,aes(x = sample, y = host_fraction, fill = gut_location)) + geom_col() + scale_fill_manual( values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot; ) )+ geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;black&quot;)+ labs(y = &quot;Host fraction&quot;, x = &quot;Sample&quot;, title = &quot;Fraction of host bases per sample&quot;)+ theme_bw() + theme( axis.text.x = element_text(angle = 90, hjust = 1) ) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue 4.1 Genome phylogeny Circular tree with genome size and completeness # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.05, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.24, pwidth = 0.1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Contamination&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() circular_tree &lt;- circular_tree + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), fill = &quot;#1e6e55&quot;, offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.15, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.6, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.8, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) Investigating large genome MAG: large_genome_mag &lt;- genome_metadata %&gt;% arrange(desc(size)) %&gt;% mutate(size_Mb = size /1000000)%&gt;% dplyr::select(genome,genus, size_Mb ,msa_percent, completeness, contamination, score, contig_count) head(large_genome_mag) # A tibble: 6 × 8 genome genus size_Mb msa_percent completeness contamination score contig_count &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 D_bin_113409 Paraclostridium 15.4 68.1 93.9 1.61 90.7 1960 2 F_bin_250894 Escherichia 4.45 98.1 100.0 0.12 99.7 196 3 M_bin_58421 Bacteroides 3.85 93.2 100.0 0.38 99.2 548 4 F_bin_219469 Parabacteroides 3.72 81.6 88.2 1.16 85.9 594 5 F_bin_158995 Anaerobiospirillum 3.66 90.4 89.4 2.27 84.8 768 6 F_bin_53850 Plesiomonas 3.59 97.6 100.0 0.29 99.4 25 Paraclostridium species tend to have genome sizes of 2.9-3.6Mb. This MAG seems to have lower msa_percent, is this relevant? It also has the highest contig count. Circular tree with genome presence/absence in different sample locations and fox behaviour # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate prevalence data prevalence_data &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% group_by(genome,gut_location) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,1,0)) %&gt;% group_by(genome) %&gt;% summarise(prevalence=sum(presence)) # Generate F_colon heatmap f_colon_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;F_colon&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate M_colon heatmap m_colon_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;M_colon&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate D_ileum heatmap d_ileum_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;D_ileum&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate K_ileum heatmap k_ileum_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;K_ileum&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Gut content heatmap gut_content_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(sample_type ==&quot;Gut content&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Gut tissue heatmap gut_tissue_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(sample_type ==&quot;Gut tissue&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate tame heatmap tame_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(fox_behaviour==&quot;tame&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate aggressive heatmap aggressive_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(fox_behaviour==&quot;aggr&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate unselected heatmap unsel_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(fox_behaviour==&quot;unsel&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add F_colon ring circular_tree &lt;- gheatmap(circular_tree, f_colon_heatmap, offset=0.2, width=0.05, colnames=FALSE) + scale_fill_manual(values = c(&quot;absent&quot; = &quot;#ffffff&quot;, &quot;present&quot; = &quot;#d6604d&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add M_colon ring circular_tree &lt;- gheatmap(circular_tree, m_colon_heatmap, offset=0.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#542788&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add D_ileum ring circular_tree &lt;- gheatmap(circular_tree, d_ileum_heatmap, offset=0.3, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#fdb863&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add K_ileum ring circular_tree &lt;- gheatmap(circular_tree, k_ileum_heatmap, offset=0.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;absent&quot; = &quot;#ffffff&quot;, &quot;present&quot; = &quot;#bb99d8&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add prevalence ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=prevalence_data, geom=geom_bar, mapping = aes(x=prevalence, y=genome), offset = 0.4, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add tame ring circular_tree &lt;- gheatmap(circular_tree, tame_heatmap, offset=1.2, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#1f77b4&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add aggressive ring circular_tree &lt;- gheatmap(circular_tree, aggressive_heatmap, offset=1.3, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#d62728&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add unselected ring circular_tree &lt;- gheatmap(circular_tree, unsel_heatmap, offset=1.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#2ca02c&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.05, y= 0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.4, y=0, label=&#39; Gut location&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.9, y=0, label=&#39; Prevalence&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x= 3.4,y=0, label=&#39; Fox behaviour&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.1.1 Taxonomy overview tax_mag &lt;-genome_metadata %&gt;% group_by(phylum) %&gt;% summarise(mag_n=n()) tax_mag %&gt;% mutate(percetage_mag=round(mag_n*100/sum(mag_n), 2)) %&gt;% arrange(-percetage_mag) %&gt;% tt() .table td.tinytable_css_v1ugxzt4laknszfjoze0, .table th.tinytable_css_v1ugxzt4laknszfjoze0 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_lwdswzsjw5jdz75d7wov, .table th.tinytable_css_lwdswzsjw5jdz75d7wov { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } phylum mag_n percetage_mag Bacillota_A 55 38.46 Bacteroidota 21 14.69 Bacillota 18 12.59 Bacillota_I 14 9.79 Pseudomonadota 10 6.99 Campylobacterota 6 4.20 Fusobacteriota 6 4.20 Actinomycetota 5 3.50 Bacillota_B 2 1.40 Desulfobacterota 2 1.40 Spirochaetota 2 1.40 Bacillota_C 1 0.70 Deferribacterota 1 0.70 4.1.2 Mag size (MB) genome_metadata &lt;- genome_metadata %&gt;% mutate(corrected_size=100*length/completeness) %&gt;% arrange(completeness) genome_metadata %&gt;% summarise(Average_corrected_size=mean(corrected_size)) # A tibble: 1 × 1 Average_corrected_size &lt;dbl&gt; 1 2515112. The average corrected size is 2.52 Mb. 4.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() .table td.tinytable_css_j2eg9i9qhp21acatnaxw, .table th.tinytable_css_j2eg9i9qhp21acatnaxw { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_ramzjh1f14t0c3vet8wn, .table th.tinytable_css_ramzjh1f14t0c3vet8wn { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Completeness Contamination 92.6±6.75 1.92±2.11 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% dplyr::select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.line = element_blank(), axis.title = element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.line = element_blank(), axis.title = element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure #pdf(&quot;figures/completeness_contamination.pdf&quot;,width=10, height=5) grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) #dev.off() 4.3 Functional overview 4.3.0.1 Predicted genes pred_genes &lt;- genome_annotations %&gt;% nrow() cat(pred_genes) 319804 4.3.0.2 Number of annotated genes and percentages #How many genes have at least 1 annotation genome_annota &lt;- genome_annotations %&gt;% filter(if_any(c(kegg, pfam, cazy), ~ !is.na(.))) %&gt;% nrow() cat(genome_annota) 257893 #Percentage of predicted genes with at least 1 annotation genome_annota*100/pred_genes [1] 80.64096 4.3.0.3 Number of KEGG annotatated genes and percentages # KEGG annotation kegg_annota &lt;- genome_annotations %&gt;% filter(!is.na(kegg)) %&gt;% nrow() cat(kegg_annota) 219314 # KEGG annotation percentage kegg_annota*100/genome_annota [1] 85.0407 4.3.0.4 Function tree # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + coord_flip()+ scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination PCoA with Euclidean distances: gift_pcoa &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% vegdist(method=&quot;euclidean&quot;) %&gt;% pcoa() gift_pcoa_rel_eigen &lt;- gift_pcoa$values$Relative_eig[1:10] # Get genome positions gift_pcoa_vectors &lt;- gift_pcoa$vectors %&gt;% #extract vectors as.data.frame() %&gt;% dplyr::select(Axis.1,Axis.2) # keep the first 2 axes gift_pcoa_eigenvalues &lt;- gift_pcoa$values$Eigenvalues[c(1,2)] #For the black arrows: Functional group loadings gift_pcoa_gifts &lt;- cov(genome_gifts, scale(gift_pcoa_vectors)) %*% diag((gift_pcoa_eigenvalues/(nrow(genome_gifts)-1))^(-0.5)) %&gt;% as.data.frame() %&gt;% rename(Axis.1=1,Axis.2=2) %&gt;% rownames_to_column(var=&quot;label&quot;) %&gt;% #get function summary vectors mutate(func=substr(label,1,3)) %&gt;% group_by(func) %&gt;% summarise(Axis.1=mean(Axis.1), Axis.2=mean(Axis.2)) %&gt;% rename(label=func) %&gt;% filter(!label %in% c(&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) set.seed(101) scale &lt;- 20 # scale for vector loadings (to make arrows visible) gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + #genome positions scale_color_manual(values=phylum_colors)+ geom_point(aes(x=Axis.1,y=Axis.2, color=phylum, size=length), alpha=0.9, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0.1,5)) + #loading positions geom_segment(data=gift_pcoa_gifts, aes(x=0, y=0, xend=Axis.1 * scale, yend=Axis.2 * scale), arrow = arrow(length = unit(0.3, &quot;cm&quot;), type = &quot;open&quot;, angle = 25), linewidth = 0.5, color = &quot;black&quot;) + #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + geom_label_repel(data = gift_pcoa_gifts, aes(label = label, x = Axis.1 * scale, y = Axis.2 * scale), segment.color = &#39;transparent&#39;) + xlim(-3,3) + ylim(-2,2) + theme_minimal() + labs( x = paste0(&quot;PCoA1 (&quot;, round(gift_pcoa_rel_eigen[1]*100, 2), &quot; %)&quot;), y = paste0(&quot;PCoA2 (&quot;, round(gift_pcoa_rel_eigen[2]*100, 2), &quot; %)&quot;) ) Warning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`). Warning: ggrepel: 11 unlabeled data points (too many overlaps). Consider increasing max.overlaps arrow_functions &lt;- gift_pcoa_gifts %&gt;% left_join(GIFT_db, by = c(&quot;label&quot; = &quot;Code_function&quot;)) %&gt;% group_by(label) %&gt;% summarise( Axis.1 = mean(Axis.1), Axis.2 = mean(Axis.2), Function = first(Function), Domain = first(Domain), Length = sqrt(Axis.1^2 + Axis.2^2), # vector length .groups = &quot;drop&quot; ) %&gt;% arrange(desc(Length)) # sort so most important arrows are first arrow_functions # A tibble: 18 × 6 label Axis.1 Axis.2 Function Domain Length &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02 0.119 -0.0345 Amino acid biosynthesis Biosynthesis 0.124 2 B07 0.0905 0.0708 Vitamin biosynthesis Biosynthesis 0.115 3 B01 0.0805 0.0477 Nucleic acid biosynthesis Biosynthesis 0.0936 4 D09 0.00454 -0.0913 Antibiotic degradation Degradation 0.0914 5 B06 0.0774 0.0195 Organic anion biosynthesis Biosynthesis 0.0798 6 B03 0.0302 -0.0148 Amino acid derivative biosynthesis Biosynthesis 0.0336 7 D01 0.00244 -0.0100 Lipid degradation Degradation 0.0103 8 D03 0.00248 -0.00530 Sugar degradation Degradation 0.00586 9 D05 0.00466 0.00234 Amino acid degradation Degradation 0.00521 10 D06 0.00255 0.00355 Nitrogen compound degradation Degradation 0.00437 11 D08 0.00261 -0.00107 Xenobiotic degradation Degradation 0.00282 12 B04 -0.000742 -0.00219 SCFA biosynthesis Biosynthesis 0.00231 13 B09 0.000491 -0.000896 Metallophore biosynthesis Biosynthesis 0.00102 14 B10 0.0000905 -0.0000140 Antibiotic biosynthesis Biosynthesis 0.0000916 15 B08 0 0 Aromatic compound biosynthesis Biosynthesis 0 16 D02 0 0 Polysaccharide degradation Degradation 0 17 D04 0 0 Protein degradation Degradation 0 18 D07 0 0 Alcohol degradation Degradation 0 PCoA with Bray-Curtis (relative composition) gift_pcoa_bray &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% vegdist(method=&quot;bray&quot;) %&gt;% pcoa() Warning in vegdist(., method = &quot;bray&quot;): you have empty rows: their dissimilarities may be meaningless in method &quot;bray&quot; gift_pcoa_rel_eigen_bray &lt;- gift_pcoa_bray$values$Relative_eig[1:10] # Get genome positions gift_pcoa_vectors_bray &lt;- gift_pcoa_bray$vectors %&gt;% #extract vectors as.data.frame() %&gt;% dplyr::select(Axis.1,Axis.2) # keep the first 2 axes gift_pcoa_eigenvalues_bray &lt;- gift_pcoa_bray$values$Eigenvalues[c(1,2)] gift_pcoa_gifts_bray &lt;- cov(genome_gifts, scale(gift_pcoa_vectors_bray)) %*% diag((gift_pcoa_eigenvalues_bray/(nrow(genome_gifts)-1))^(-0.5)) %&gt;% as.data.frame() %&gt;% rename(Axis.1=1,Axis.2=2) %&gt;% rownames_to_column(var=&quot;label&quot;) %&gt;% #get function summary vectors mutate(func=substr(label,1,3)) %&gt;% group_by(func) %&gt;% summarise(Axis.1=mean(Axis.1), Axis.2=mean(Axis.2)) %&gt;% rename(label=func) %&gt;% filter(!label %in% c(&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) set.seed(101) scale &lt;- 20 # scale for vector loadings gift_pcoa_vectors_bray %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + #genome positions scale_color_manual(values=phylum_colors)+ geom_point(aes(x=Axis.1,y=Axis.2, color=phylum, size=length), alpha=0.9, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0.1,5)) + #loading positions geom_segment(data=gift_pcoa_gifts_bray, aes(x=0, y=0, xend=Axis.1 * scale, yend=Axis.2 * scale), arrow = arrow(length = unit(0.3, &quot;cm&quot;), type = &quot;open&quot;, angle = 25), linewidth = 0.5, color = &quot;black&quot;) + #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen_bray[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen_bray[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + geom_label_repel(data = gift_pcoa_gifts_bray, aes(label = label, x = Axis.1 * scale, y = Axis.2 * scale), segment.color = &#39;transparent&#39;) + xlim(-0.8,0.8) + ylim(-0.5,0.5) + theme_minimal() + theme(legend.position = &quot;none&quot;)+ labs( x = paste0(&quot;PCoA1 (&quot;, round(gift_pcoa_rel_eigen[1]*100, 2), &quot; %)&quot;), y = paste0(&quot;PCoA2 (&quot;, round(gift_pcoa_rel_eigen[2]*100, 2), &quot; %)&quot;) ) Warning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`). Warning: Removed 9 rows containing missing values or values outside the scale range (`geom_segment()`). Warning: Removed 9 rows containing missing values or values outside the scale range (`geom_label_repel()`). arrow_functions_bray &lt;- gift_pcoa_gifts_bray %&gt;% left_join(GIFT_db, by = c(&quot;label&quot; = &quot;Code_function&quot;)) %&gt;% group_by(label) %&gt;% summarise( Axis.1 = mean(Axis.1), Axis.2 = mean(Axis.2), Function = first(Function), Domain = first(Domain), Length = sqrt(Axis.1^2 + Axis.2^2), .groups = &quot;drop&quot; ) %&gt;% arrange(desc(Length)) arrow_functions_bray # A tibble: 18 × 6 label Axis.1 Axis.2 Function Domain Length &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02 0.912 0.444 Amino acid biosynthesis Biosynthesis 1.01 2 B07 0.794 -0.455 Vitamin biosynthesis Biosynthesis 0.915 3 D09 0.00697 0.864 Antibiotic degradation Degradation 0.864 4 B01 0.736 -0.152 Nucleic acid biosynthesis Biosynthesis 0.752 5 B06 0.605 -0.0718 Organic anion biosynthesis Biosynthesis 0.609 6 B03 0.236 0.170 Amino acid derivative biosynthesis Biosynthesis 0.291 7 D01 -0.0146 0.0836 Lipid degradation Degradation 0.0849 8 D03 0.0182 0.0481 Sugar degradation Degradation 0.0514 9 D05 0.0428 -0.0105 Amino acid degradation Degradation 0.0441 10 D06 0.0212 -0.0183 Nitrogen compound degradation Degradation 0.0280 11 D08 0.0199 0.0195 Xenobiotic degradation Degradation 0.0279 12 B04 -0.0124 0.0191 SCFA biosynthesis Biosynthesis 0.0227 13 B09 0.00328 0.00980 Metallophore biosynthesis Biosynthesis 0.0103 14 B10 0.000699 0.000633 Antibiotic biosynthesis Biosynthesis 0.000943 15 B08 0 0 Aromatic compound biosynthesis Biosynthesis 0 16 D02 0 0 Polysaccharide degradation Degradation 0 17 D04 0 0 Protein degradation Degradation 0 18 D07 0 0 Alcohol degradation Degradation 0 UMAP set.seed(1001) #parameters to test neighbors_values &lt;- c(5, 15, 30) min_dist_values &lt;- c(0.1, 0.3, 0.5) umap_plots &lt;- list() # Loop over combinations for (nn in neighbors_values) { for (md in min_dist_values) { umap_result &lt;- umap(function_table, n_neighbors = nn, min_dist = md, metric = &quot;euclidean&quot;) df_umap &lt;- as.data.frame(umap_result) %&gt;% mutate(genome = rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(UMAP1 = V1, UMAP2 = V2) p &lt;- ggplot(df_umap, aes(x = UMAP1, y = UMAP2, color = phylum, size = length)) + geom_point(alpha = 0.7, shape=16) + scale_color_manual(values = phylum_colors) + theme_minimal() + labs(title = paste0(&quot;UMAP (neighbors=&quot;, nn, &quot;, min_dist=&quot;, md, &quot;)&quot;), color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) p &lt;- p + theme(legend.position = &quot;none&quot;) umap_plots[[paste(nn, md, sep=&quot;_&quot;)]] &lt;- p } } ggpubr::ggarrange(plotlist = umap_plots, ncol = 3, nrow = 3) set.seed(1001) # Trying different perplexity values perplexities &lt;- c(5, 7,8, 9, 10, 11, 12, 13, 15) plots &lt;- lapply(perplexities, function(p) { tsne_result &lt;- Rtsne( X = function_table, dims = 2, perplexity = p, check_duplicates = FALSE ) tsne_df &lt;- as.data.frame(tsne_result$Y) %&gt;% mutate(genome = rownames(function_table)) %&gt;% inner_join(genome_metadata, by = &quot;genome&quot;) %&gt;% rename(tSNE1 = &quot;V1&quot;, tSNE2 = &quot;V2&quot;) ggplot(tsne_df, aes(x = tSNE1, y = tSNE2, color = phylum)) + geom_point(alpha = 0.7, size = 2) + scale_color_manual(values=phylum_colors)+ theme_minimal(base_size = 5) + theme(legend.position = &quot;none&quot;) + # remove legend labs(title = paste(&quot;Perplexity =&quot;, p)) }) ggpubr::ggarrange(plotlist = plots, ncol = 3, nrow = 3) nrow(function_table) [1] 144 # Generate the tSNE ordination set.seed(1001) tSNE_function &lt;- Rtsne(X=function_table, dims = 2, perplexity = 10, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% dplyr::select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Core microbiota 5.3 Wilcoxon Test 5.4 Kruskal-Wallis", " Chapter 5 Community composition behaviour_colors &lt;- c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot; ) 5.1 Taxonomy overview 5.1.1 Stacked barplot tax_barplot &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome), ~./sum(.)) %&gt;% #apply TSS normalization pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts tax_barplot_filt &lt;- genome_counts_filt %&gt;% dplyr::select(-all_of(samples_to_remove))%&gt;% mutate_at(vars(-genome), ~./sum(.)) %&gt;% #apply TSS normalization pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts Evaluating the community composition at each of the gut locations. ggplot(tax_barplot, aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_grid(. ~ gut_location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ggplot(tax_barplot_filt, aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_grid(. ~ gut_location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) Evaluating community composition between the fox behaviours within the different gut locations: ggplot(tax_barplot, aes(x=sample,y=count, fill=phylum, group=phylum)) + geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ gut_location + fox_behaviour, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ggplot(tax_barplot, aes(x=sample,y=count, fill=phylum, group=phylum)) + geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ fox_behaviour + gut_location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ggplot(tax_barplot, aes(x=sample,y=count, fill=phylum, group=phylum)) + geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ fox_behaviour + sample_type, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ggplot(tax_barplot, aes(x=sample,y=count, fill=phylum, group=phylum)) + geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ sample_type+ fox_behaviour, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ### Only with F_colon tax_barplot_fcolon &lt;- tax_barplot %&gt;% filter(gut_location == &quot;F_colon&quot;) ggplot(tax_barplot_fcolon, aes(x=sample,y=count, fill=phylum, group=phylum)) + geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ fox_behaviour, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalization pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,fox_behaviour) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T), tame_mean=mean(relabun[fox_behaviour ==&quot;tame&quot;]*100, na.rm=T), tame_sd=sd(relabun[fox_behaviour ==&quot;tame&quot;]*100, na.rm=T), aggressive_mean=mean(relabun[fox_behaviour ==&quot;aggr&quot;]*100, na.rm=T), aggressive_sd=sd(relabun[fox_behaviour==&quot;aggr&quot;]*100, na.rm=T), unsel_mean=mean(relabun[fox_behaviour ==&quot;unsel&quot;]*100, na.rm=T), unsel_sd=sd(relabun[fox_behaviour ==&quot;unsel&quot;]*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2)), tame=str_c(round(tame_mean,2),&quot;±&quot;,round(tame_sd,2)), aggresive=str_c(round(aggressive_mean,2),&quot;±&quot;,round(aggressive_sd,2)), unselected =str_c(round(unsel_mean,2),&quot;±&quot;,round(unsel_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total,tame,aggresive, unselected) %&gt;% tt() .table td.tinytable_css_y7kkz0uj2g26zfm6hhe6, .table th.tinytable_css_y7kkz0uj2g26zfm6hhe6 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_xvexi9jnk9vylyazuwue, .table th.tinytable_css_xvexi9jnk9vylyazuwue { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } phylum total tame aggresive unselected Bacillota_A 53.84±36.19 58.59±35.17 50.48±39.83 49.55±33.08 Bacteroidota 15.25±19.97 9.6±16.51 16.34±20.1 26.91±24.37 Bacillota 12.28±22.53 15.11±24.53 12.65±24.9 4.34±5.37 Fusobacteriota 4.95±6.83 4.36±7.66 5.36±6.89 5.47±4.84 Pseudomonadota 4.22±13.86 2.75±5.01 6.73±21.62 2.25±2.29 Bacillota_I 2.76±3.46 1.45±2.48 2.68±2.84 6.21±4.68 Campylobacterota 2.69±4.84 3.2±4.91 2.27±5.02 2.35±4.79 Desulfobacterota 1.45±7.98 3.15±12.05 0.05±0.11 0.33±0.33 Spirochaetota 0.91±2.5 0.35±1.12 1.94±3.64 0±0 Deferribacterota 0.73±1.38 0.66±1.11 0.52±1.29 1.38±2.07 Bacillota_C 0.67±0.9 0.51±0.87 0.69±0.88 1.01±1.02 Actinomycetota 0.21±0.37 0.18±0.31 0.26±0.48 0.15±0.25 Bacillota_B 0.04±0.09 0.05±0.1 0.03±0.06 0.04±0.11 Distribution of relative abundance across samples: phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% dplyr::select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) ## Calculate the phylum order based on mean relative abundance phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% dplyr::select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_nested(. ~ gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 10), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)) ) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~fox_behaviour)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 10), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)) ) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.1.3 Family `summarise()` has grouped output by &#39;sample&#39;, &#39;family&#39;. You can override using the `.groups` argument. .table td.tinytable_css_55o7vaetdjypmqafdam2, .table th.tinytable_css_55o7vaetdjypmqafdam2 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_1y1i2vba6ez8ivl5gw2p, .table th.tinytable_css_1y1i2vba6ez8ivl5gw2p { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } family total tame aggr unsel Peptostreptococcaceae 45.03±42.9 48.09±43.82 44.45±44.89 38.7±40.68 Bacteroidaceae 14.24±18.56 9±15.28 14.97±18.23 25.71±23.3 Lactobacillaceae 9.31±16.8 13.65±22.13 7.06±12.19 3.54±4.51 Fusobacteriaceae 4.95±6.83 4.36±7.66 5.36±6.89 5.47±4.84 Lachnospiraceae 4.29±6.04 3.43±6.01 4.38±6.09 6.22±6.34 Clostridiaceae 3.1±10.53 6.24±15.54 0.36±0.53 1.45±2.28 Streptococcaceae 2.9±8.69 1.46±2.66 5.44±13.42 0.78±0.84 Enterobacteriaceae 2.04±5.98 1.97±4.82 2.57±8.17 1.02±1.62 Helicobacteraceae 1.93±3.97 1.76±3.39 1.94±4.4 2.32±4.79 Mycoplasmoidaceae 1.78±3.5 0.9±2.51 1.58±2.76 4.43±5.72 CAMWXW01 1.36±7.99 3.12±12.06 0.02±0.08 0±0 Pasteurellaceae 1.32±8.53 0±0 3.37±13.61 0±0 Brachyspiraceae 0.91±2.5 0.35±1.12 1.94±3.64 0±0 Campylobacteraceae 0.76±1.77 1.45±2.39 0.33±0.97 0.02±0.07 Mucispirillaceae 0.73±1.38 0.66±1.11 0.52±1.29 1.38±2.07 Acidaminococcaceae 0.67±0.9 0.51±0.87 0.69±0.88 1.01±1.02 Oscillospiraceae 0.62±0.9 0.31±0.53 0.56±0.74 1.52±1.37 Burkholderiaceae 0.6±0.84 0.57±0.89 0.46±0.71 1±0.93 Muribaculaceae 0.58±1.07 0.23±0.44 0.99±1.55 0.52±0.46 Erysipelotrichaceae 0.53±0.75 0.37±0.66 0.58±0.77 0.8±0.9 Ruminococcaceae 0.41±0.67 0.41±0.84 0.39±0.58 0.43±0.44 UBA932 0.23±0.41 0.19±0.49 0.22±0.35 0.34±0.37 Coprobacillaceae 0.23±0.46 0.12±0.24 0.32±0.65 0.28±0.38 Succinivibrionaceae 0.18±0.37 0.14±0.37 0.27±0.44 0.04±0.1 Anaeroplasmataceae 0.16±0.34 0.07±0.23 0.2±0.44 0.29±0.32 Marinifilaceae 0.14±0.3 0.16±0.37 0.1±0.17 0.22±0.32 CAG-465 0.13±0.38 0.03±0.07 0.07±0.21 0.53±0.77 CAG-508 0.12±0.27 0.03±0.07 0.12±0.28 0.32±0.43 Coriobacteriaceae 0.09±0.28 0.05±0.15 0.17±0.41 0.01±0.03 CAG-239 0.09±0.19 0.07±0.21 0.06±0.15 0.19±0.2 Bifidobacteriaceae 0.09±0.23 0.09±0.25 0.09±0.23 0.08±0.2 Desulfovibrionaceae 0.08±0.19 0.03±0.08 0.03±0.09 0.33±0.33 UBA660 0.07±0.26 0±0 0±0 0.41±0.53 Tannerellaceae 0.06±0.13 0.02±0.07 0.06±0.15 0.12±0.19 Anaerotignaceae 0.05±0.14 0.02±0.06 0.1±0.21 0.04±0.07 Aristaeellaceae 0.05±0.14 0.01±0.03 0.02±0.04 0.23±0.26 Enterococcaceae 0.04±0.13 0.01±0.03 0.08±0.19 0.03±0.06 Peptococcaceae 0.04±0.09 0.05±0.1 0.03±0.06 0.04±0.11 Eggerthellaceae 0.03±0.08 0.04±0.1 0.01±0.02 0.06±0.11 Butyricicoccaceae 0.03±0.08 0.01±0.07 0.02±0.04 0.09±0.13 Turicibacteraceae 0.03±0.11 0±0 0.07±0.17 0±0 Anaerovoracaceae 0.01±0.04 0.01±0.04 0.01±0.02 0.03±0.05 CAG-826 0±0.01 0±0.01 0±0.01 0±0 family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~fox_behaviour.x)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.1.4 Genus `summarise()` has grouped output by &#39;sample&#39;, &#39;genus&#39;. You can override using the `.groups` argument. .table td.tinytable_css_ud5gcrgy6eehlea5am6a, .table th.tinytable_css_ud5gcrgy6eehlea5am6a { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_zwpowaxnsb6a7wy7x5tp, .table th.tinytable_css_zwpowaxnsb6a7wy7x5tp { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } genus total tame aggr unsel Paraclostridium 44.77±42.86 47.88±44.04 44.02±44.54 38.7±40.68 Bacteroides 5.72±8 2.83±4.62 5.8±6.72 12.77±12.77 Limosilactobacillus 5.1±9.73 5.91±10.31 5.41±11.11 2.4±3.06 Phocaeicola 3.83±5.4 2.45±4.54 5.12±6.63 4.39±3.83 Lactobacillus 3.54±8.66 6.99±12.38 0.94±1.41 0.73±1.1 Fusobacterium_A 3.22±4.67 3.04±5.44 3.36±4.56 3.36±3.04 Sarcina 2.71±9.12 5.38±13.47 0.33±0.49 1.42±2.26 Lactococcus 2.34±8.57 1.09±2.22 4.51±13.44 0.59±0.52 Paraprevotella 2.23±3.46 2.3±4.06 1.33±2.3 4.11±3.63 Alloprevotella 2.07±2.93 1.14±2.01 2.45±3.51 3.53±2.99 Mycoplasmoides 1.78±3.5 0.9±2.51 1.58±2.76 4.43±5.72 Escherichia 1.74±5.83 1.4±4.34 2.44±8.19 0.99±1.63 Fusobacterium_B 1.67±2.21 1.32±2.25 1.85±2.32 2.11±2 CAMWXW01 1.36±7.99 3.12±12.06 0.02±0.08 0±0 Canicola 1.32±8.53 0±0 3.37±13.61 0±0 Blautia 1.2±1.74 1.09±1.91 1.25±1.8 1.37±1.27 Blautia_A 1.01±1.57 0.66±1.17 1.18±1.87 1.5±1.71 Brachyspira 0.91±2.5 0.35±1.12 1.94±3.64 0±0 Helicobacter_A 0.9±2.2 0.64±1.34 0.59±1.02 2.22±4.63 Campylobacter_D 0.76±1.77 1.45±2.39 0.33±0.97 0.02±0.07 Helicobacter_C 0.75±2.24 0.96±2.1 0.86±2.84 0±0 Mucispirillum 0.73±1.38 0.66±1.11 0.52±1.29 1.38±2.07 Phascolarctobacterium_A 0.67±0.9 0.51±0.87 0.69±0.88 1.01±1.02 Ligilactobacillus 0.64±1.09 0.69±1.08 0.69±1.26 0.41±0.72 Faecousia 0.6±0.88 0.3±0.53 0.55±0.73 1.48±1.35 Sutterella 0.6±0.84 0.57±0.89 0.46±0.71 1±0.93 Limisoma 0.58±1.07 0.23±0.44 0.99±1.55 0.52±0.46 Faecalimonas 0.57±0.89 0.44±0.88 0.48±0.73 1.07±1.15 Streptococcus 0.56±1.09 0.36±0.65 0.93±1.54 0.19±0.42 Clostridium 0.39±1.43 0.86±2.11 0.03±0.05 0.03±0.07 Faecalibacterium 0.33±0.58 0.35±0.72 0.33±0.52 0.31±0.28 Plesiomonas 0.31±0.97 0.57±1.35 0.13±0.53 0.03±0.06 Helicobacter_B 0.28±1.27 0.15±0.44 0.49±1.99 0.11±0.18 Faecalimicrobium 0.26±1.02 0.2±0.66 0.44±1.48 0±0 Otoolea 0.24±0.36 0.25±0.43 0.16±0.25 0.42±0.37 Cryptobacteroides 0.23±0.41 0.19±0.49 0.22±0.35 0.34±0.37 Oliverpabstia 0.21±0.42 0.19±0.4 0.28±0.5 0.11±0.24 Allobaculum 0.2±0.32 0.12±0.23 0.3±0.42 0.15±0.16 Prevotella 0.19±0.49 0.22±0.6 0.15±0.45 0.22±0.34 Anaerobiospirillum 0.17±0.37 0.14±0.37 0.25±0.43 0.04±0.1 Holdemanella 0.16±0.33 0.2±0.45 0.12±0.24 0.17±0.18 Brotaphodocola 0.16±0.28 0.08±0.22 0.12±0.2 0.44±0.4 CALUXS01 0.16±0.34 0.07±0.23 0.2±0.44 0.29±0.32 OM05-12 0.15±0.39 0.04±0.17 0.06±0.13 0.61±0.74 Odoribacter 0.14±0.3 0.16±0.37 0.1±0.17 0.22±0.32 UBA9414 0.14±0.24 0.16±0.29 0.07±0.13 0.23±0.27 0.13±0.38 0.03±0.07 0.07±0.21 0.53±0.77 Faecalibacillus 0.13±0.42 0.04±0.09 0.27±0.64 0.04±0.08 JAHHTG01 0.12±0.38 0±0 0.13±0.34 0.39±0.73 JAGZHZ01 0.11±0.23 0.11±0.25 0.1±0.19 0.15±0.26 HGM12587 0.1±0.23 0.02±0.07 0.08±0.19 0.36±0.37 Gallintestinimicrobium 0.09±0.14 0.08±0.14 0.11±0.16 0.08±0.09 Collinsella 0.09±0.28 0.05±0.15 0.17±0.41 0.01±0.03 UMGS1370 0.09±0.16 0.08±0.17 0.11±0.16 0.06±0.14 51-20 0.09±0.19 0.07±0.21 0.06±0.15 0.19±0.2 Bifidobacterium 0.09±0.23 0.09±0.25 0.09±0.23 0.08±0.2 Taurinivorans 0.08±0.19 0.03±0.08 0.03±0.09 0.33±0.33 Frisingicoccus 0.07±0.22 0.08±0.2 0.1±0.28 0±0 UBA3789 0.07±0.26 0±0 0±0 0.41±0.53 Marvinbryantia 0.07±0.17 0.03±0.08 0.07±0.15 0.17±0.32 CAG-269 0.07±0.16 0±0.02 0.1±0.2 0.16±0.22 Schaedlerella 0.06±0.12 0.04±0.1 0.06±0.14 0.09±0.14 Cetobacterium_A 0.06±0.39 0±0 0.15±0.62 0±0 Parabacteroides 0.06±0.13 0.02±0.07 0.06±0.15 0.12±0.19 Ventricola 0.05±0.14 0.01±0.03 0.02±0.04 0.23±0.26 Phocaeicola_A 0.05±0.12 0.02±0.1 0.06±0.13 0.09±0.13 CALVGN01 0.05±0.08 0.05±0.1 0.03±0.05 0.09±0.11 Enterococcus 0.04±0.13 0.01±0.03 0.08±0.19 0.03±0.06 CAJMNU01 0.04±0.11 0.02±0.06 0.07±0.16 0.03±0.05 UMGS1590 0.04±0.09 0.05±0.1 0.03±0.06 0.04±0.11 CALDMQ01 0.04±0.1 0.06±0.14 0.02±0.04 0.03±0.06 Negativibacillus 0.04±0.09 0.02±0.06 0.02±0.05 0.1±0.16 Fimiplasma 0.04±0.15 0±0 0±0 0.21±0.32 Avimicrobium 0.04±0.08 0.04±0.1 0.03±0.06 0.02±0.04 Anaerotignum 0.03±0.08 0.02±0.05 0.06±0.11 0.03±0.06 Slackia 0.03±0.08 0.04±0.1 0.01±0.02 0.06±0.11 Avilachnospira 0.03±0.06 0.03±0.07 0.03±0.06 0.04±0.06 Butyricicoccus 0.03±0.08 0.01±0.07 0.02±0.04 0.09±0.13 Latilactobacillus 0.03±0.1 0.05±0.15 0.02±0.04 0±0 Turicibacter 0.03±0.11 0±0 0.07±0.17 0±0 Laedolimicola 0.03±0.07 0.01±0.03 0.04±0.1 0.04±0.05 UMGS1663 0.03±0.1 0±0 0±0 0.15±0.22 Choladousia 0.03±0.07 0.01±0.04 0.05±0.11 0.01±0.03 Merdicola 0.02±0.07 0.03±0.07 0.03±0.08 0.01±0.01 Beduini 0.02±0.06 0.02±0.06 0.03±0.07 0.01±0.02 Metalachnospira 0.02±0.07 0.01±0.02 0.04±0.1 0.01±0.02 Alitiscatomonas 0.02±0.04 0.01±0.03 0.02±0.04 0.04±0.07 Dorea_B 0.02±0.04 0.03±0.06 0±0.01 0.01±0.01 Ruminococcus_B 0.01±0.05 0.02±0.08 0.01±0.02 0.01±0.03 Evtepia 0.01±0.05 0±0.02 0.01±0.03 0.04±0.1 Gallibacter 0.01±0.04 0.01±0.04 0.01±0.02 0.03±0.05 Succinivibrio 0.01±0.03 0±0 0.02±0.05 0±0 Onthovivens 0±0.01 0±0.01 0±0.01 0±0 genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~ gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~fox_behaviour)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2 Core microbiota library(UpSetR) genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(., &quot;genome&quot;) #Presence/absence genome_counts_rel_pa &lt;- (genome_counts_rel &gt; 0) * 1 #Add gut_location info df &lt;- as.data.frame(t(genome_counts_rel_pa)) %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata, by=&quot;sample&quot;) #Summarize by location table_upset_analysis &lt;- df %&gt;% group_by(gut_location) %&gt;% summarise(across(-sample, ~ as.integer(any(. &gt; 0)))) %&gt;% column_to_rownames(&quot;gut_location&quot;) %&gt;% t() %&gt;% as.data.frame() location_colors &lt;- c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot; ) #UpSet plot upset(table_upset_analysis, keep.order = TRUE, sets = rev(c(&quot;F_colon&quot;, &quot;M_colon&quot;, &quot;D_ileum&quot;, &quot;K_ileum&quot;)), sets.bar.color = rev(location_colors), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) # Convert to relative abundance genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome), ~ . / sum(.)) %&gt;% column_to_rownames(&quot;genome&quot;) # Presence/absence genome_counts_rel_pa &lt;- (genome_counts_rel &gt; 0) * 1 # Add behaviour info df &lt;- as.data.frame(t(genome_counts_rel_pa)) %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) # Summarize by behaviour table_upset_analysis &lt;- df %&gt;% group_by(fox_behaviour) %&gt;% summarise(across(-sample, ~ as.integer(any(. &gt; 0)))) %&gt;% column_to_rownames(&quot;fox_behaviour&quot;) %&gt;% t() %&gt;% as.data.frame() # Behaviour colors behaviour_colors &lt;- c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot; ) # UpSet plot upset(table_upset_analysis, keep.order = TRUE, sets = rev(names(behaviour_colors)), sets.bar.color = rev(unname(behaviour_colors)), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) 5.3 Wilcoxon Test H0 (null): The distribution of genome prevalence (presence) is the same across the two sample_type groups (gut tissue or gut content). mag_prevalence_location &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% dplyr::select(genome,sample,presence,gut_location, sample_type) %&gt;% group_by(genome,gut_location, sample_type) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) %&gt;% group_by(genome,sample_type) %&gt;% summarise(presence=sum(presence)) mag_prevalence_location %&gt;% group_by(sample_type) %&gt;% summarise(mean=mean(presence),sd=sd(presence)) %&gt;% tt() .table td.tinytable_css_kuxoi6xo88t3i37o4b4y, .table th.tinytable_css_kuxoi6xo88t3i37o4b4y { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_27gjmz5uygctwagn8jrp, .table th.tinytable_css_27gjmz5uygctwagn8jrp { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } sample_type mean sd Gut content 1.8601399 0.3480610 Gut tissue 0.7552448 0.4924326 wilcox.test(presence ~ sample_type, data=mag_prevalence_location) %&gt;% tidy() # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 19123 5.12e-44 Wilcoxon rank sum test with continuity correction two.sided mag_prevalence_location %&gt;% ggplot(aes(x=sample_type,y=presence, color=sample_type, fill=sample_type)) + geom_boxplot(alpha = 0.5) + geom_point() + theme_minimal() Comparing the prevalence/presence of the MAGs between aggressive and tame foxes mag_prevalence_behaviour &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #divide each column (except genome) by its sum to get relative abundance pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(!grepl(&quot;unsel&quot;, fox_behaviour))%&gt;% #to remove the unselected foxes mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% #converts abundance to presence/absence dplyr::select(genome,sample,presence,gut_location, fox_behaviour) %&gt;% group_by(genome,gut_location, fox_behaviour) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) %&gt;% #counts presence per combination of genome, gut location and fox behaviour group_by(genome,fox_behaviour) %&gt;% summarise(presence=sum(presence)) #sum the presences for each fox behaviour mag_prevalence_behaviour %&gt;% group_by(fox_behaviour) %&gt;% summarise(mean=mean(presence),sd=sd(presence)) %&gt;% tt() .table td.tinytable_css_ttnl9d6gaunf09gh6pag, .table th.tinytable_css_ttnl9d6gaunf09gh6pag { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_6nhudz39v24lt3vw1j7y, .table th.tinytable_css_6nhudz39v24lt3vw1j7y { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } fox_behaviour mean sd aggr 2.321678 0.8101591 tame 1.566434 0.7922107 wilcox.test(presence ~ fox_behaviour, data=mag_prevalence_behaviour) %&gt;% tidy() # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 15248 2.69e-14 Wilcoxon rank sum test with continuity correction two.sided behaviour_colors &lt;- c( &quot;#d62728&quot;, &quot;#1f77b4&quot;,&quot;#2ca02c&quot;) mag_prevalence_behaviour %&gt;% ggplot(aes(x=fox_behaviour,y=presence, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot() + geom_point() + scale_color_manual(values=behaviour_colors) + scale_fill_manual(values=str_c(behaviour_colors,&quot;50&quot;)) + theme_minimal() 5.4 Kruskal-Wallis As we have &gt;2 groups in gut location and fox behaviour, we will carry out Kruskal-Wallis tests to evaluate if there are significant differences between the groups in terms of MAG presence count (how many MAGs are present in each group). If the p-value &lt; 0.05, we will do pairwise Wilcoxon tests, to evaluate which of the groups differ in this regard. Gut location: mag_prevalence_gutlocation &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% dplyr::select(genome,sample,presence,gut_location, fox_behaviour) %&gt;% group_by(genome,gut_location) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) `summarise()` has grouped output by &#39;genome&#39;. You can override using the `.groups` argument. # Kruskal–Wallis test (nonparametric ANOVA) kruskal.test(presence ~ gut_location, data = mag_prevalence_gutlocation) Kruskal-Wallis rank sum test data: presence by gut_location Kruskal-Wallis chi-squared = 352.88, df = 3, p-value &lt; 2.2e-16 pairwise.wilcox.test(mag_prevalence_gutlocation$presence, mag_prevalence_gutlocation$gut_location, p.adjust.method = &quot;fdr&quot;) Pairwise comparisons using Wilcoxon rank sum test with continuity correction data: mag_prevalence_gutlocation$presence and mag_prevalence_gutlocation$gut_location D_ileum F_colon K_ileum F_colon 4.4e-06 - - K_ileum &lt; 2e-16 &lt; 2e-16 - M_colon 0.0056 3.0e-11 &lt; 2e-16 P value adjustment method: fdr mag_prevalence_foxbehaviour &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% dplyr::select(genome,sample,presence,gut_location, fox_behaviour) %&gt;% group_by(genome,fox_behaviour) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) `summarise()` has grouped output by &#39;genome&#39;. You can override using the `.groups` argument. #Kruskal–Wallis test (nonparametric ANOVA) kruskal.test(presence ~ fox_behaviour, data = mag_prevalence_foxbehaviour) Kruskal-Wallis rank sum test data: presence by fox_behaviour Kruskal-Wallis chi-squared = 10.772, df = 2, p-value = 0.004581 pairwise.wilcox.test(mag_prevalence_foxbehaviour$presence, mag_prevalence_foxbehaviour$fox_behaviour, p.adjust.method = &quot;fdr&quot;) Pairwise comparisons using Wilcoxon rank sum test with continuity correction data: mag_prevalence_foxbehaviour$presence and mag_prevalence_foxbehaviour$fox_behaviour aggr tame tame 0.0961 - unsel 0.0034 0.1236 P value adjustment method: fdr "],["alpha-diversity.html", "Chapter 6 Alpha diversity 6.1 Summary table 6.2 By location 6.3 By behaviour and location", " Chapter 6 Alpha diversity if (&quot;package:pscl&quot; %in% search()) detach(&quot;package:pscl&quot;, unload = TRUE) if (&quot;package:MuMIn&quot; %in% search()) detach(&quot;package:MuMIn&quot;, unload = TRUE) if (&quot;package:MASS&quot; %in% search()) detach(&quot;package:MASS&quot;, unload = TRUE) load(&quot;data/data.Rdata&quot;) 6.1 Summary table library(hilldiv2) behaviour_colors &lt;- c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot; ) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% # richness as.matrix() %&gt;% # ensure it&#39;s a plain matrix for t() t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% # neutral diversity as.matrix() %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% # phylogenetic diversity as.matrix() %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] genome_counts_filt &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% dplyr::select_if(~!all(. == 0)) %&gt;% rownames_to_column(., &quot;genome&quot;) genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] genome_gifts &lt;- genome_gifts[, colSums(genome_gifts != 0) &gt; 0] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% # functional diversity as.matrix() %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) .table td.tinytable_css_cr6dpdmahapt8f5gavsc, .table th.tinytable_css_cr6dpdmahapt8f5gavsc { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_g4tmaihoqycd2z6nv9dn, .table th.tinytable_css_g4tmaihoqycd2z6nv9dn { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } alpha aggr tame unsel richness 38.89±45.23 29.4±39.37 51.25±45.54 neutral 16.43±18.23 14.11±17.85 22.02±19.84 phylogenetic 3.48±2.55 3.14±2.45 4.34±2.48 functional 1.29±0.22 1.29±0.24 1.37±0.21 .table td.tinytable_css_uw22cfitmla2q5yc7t1y, .table th.tinytable_css_uw22cfitmla2q5yc7t1y { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_3qswhcsfjykj47mv7j4w, .table th.tinytable_css_3qswhcsfjykj47mv7j4w { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } alpha fcolon mcolon kileum dileum richness 97.91±21.81 24.33±25.63 1.73±0.65 25.83±32.59 neutral 42.5±9.35 11.49±12.46 1.15±0.14 11.34±12.01 phylogenetic 6.54±0.75 3.3±2.38 1.11±0.11 3.03±1.91 functional 1.51±0.06 1.28±0.22 1.03±0.03 1.39±0.16 6.2 By location 6.2.1 Plots richness_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(gut_location) %&gt;% dplyr::summarise_at(.vars = names(.)[2], .funs = c(&quot;Richness mean&quot; = &quot;mean&quot;, &quot;Richness sd&quot; = &quot;sd&quot;)) neutral_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(gut_location) %&gt;% dplyr::summarise_at(.vars = names(.)[3], .funs = c(&quot;Neutral mean&quot; = &quot;mean&quot;, &quot;Neutral sd&quot; = &quot;sd&quot;)) phylogenetic_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(gut_location) %&gt;% dplyr::summarise_at(.vars = names(.)[4], .funs = c(&quot;Phylogenetic mean&quot; = &quot;mean&quot;, &quot;Phylogenetic sd&quot; = &quot;sd&quot;)) cbind(richness_mean, neutral_mean[, 2:3], phylogenetic_mean[, 2:3])%&gt;% tt() .table td.tinytable_css_kdvhdoj4ioyahdkmu3g7, .table th.tinytable_css_kdvhdoj4ioyahdkmu3g7 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_eyo6nbj67a3l3kk4lrv5, .table th.tinytable_css_eyo6nbj67a3l3kk4lrv5 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } gut_location Richness mean Richness sd Neutral mean Neutral sd Phylogenetic mean Phylogenetic sd D_ileum 25.833333 32.5906661 11.335985 12.0056914 3.032274 1.9060737 F_colon 97.909091 21.8057540 42.504875 9.3501832 6.544581 0.7458711 K_ileum 1.727273 0.6466698 1.153628 0.1406374 1.112373 0.1137430 M_colon 24.333333 25.6314201 11.486763 12.4646180 3.299202 2.3761209 group_n &lt;- alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample))%&gt;% dplyr::select(gut_location) %&gt;% pull() %&gt;% unique() %&gt;% length() #pdf(&quot;figures/diversity_location.pdf&quot;,width=20, height=9) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = gut_location, group=gut_location, color=gut_location, fill=gut_location)) + geom_boxplot(outlier.shape = NA, show.legend = FALSE, alpha = 0.5) + geom_jitter(alpha=0.5) + scale_color_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;)) + scale_fill_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;, &quot;50&quot; )) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( axis.ticks.x = element_blank(), strip.text.x = element_text(size = 12, color=&quot;black&quot;,face=&quot;bold&quot;), strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), legend.text=element_text(size=10), legend.title = element_text(size=12))+ guides(fill = guide_legend(override.aes = list(size=3))) #dev.off() 6.2.2 Generalized linear models 6.2.2.1 Richness First, we will model the richness only taking into account the gut location, as it seems to hold the greatest variance. Count data are often modeled with Poisson distribution, but this distribution assumes the mean = variance. In the case of richness, the data is usually overdispersed (variance &gt; mean), so we use a negative binomial model. Analysis of Deviance Table Model: Negative Binomial(1.314), link: log Response: richness Terms added sequentially (first to last) Df Deviance Resid. Df Resid. Dev Pr(&gt;Chi) NULL 45 123.001 gut_location 3 76.079 42 46.922 &lt; 2.2e-16 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The p_value (&lt; 2.2e-16) is much lower than 0.05 , so this model strongly suggests that alpha diversity differs greatly between gut locations. #how well the model fits compared to a null model pscl::pR2(Modelq0_Loca) fitting null model for pseudo-r2 Theta(1) = 0.550546, 2(Ls - Lm) = 54.832600 llh llhNull G2 McFadden r2ML r2CU -182.1918677 -206.5422888 48.7008421 0.1178956 0.6530983 0.6531806 Even though gut location is highly significant, it only modestly explains richness variation on a McFadden scale #Estimated marginal means emmeans(Modelq0_Loca, pairwise ~ gut_location) $emmeans gut_location emmean SE df asymp.LCL asymp.UCL D_ileum 3.252 0.258 Inf 2.746 3.76 F_colon 4.584 0.265 Inf 4.065 5.10 K_ileum 0.547 0.349 Inf -0.138 1.23 M_colon 3.192 0.259 Inf 2.685 3.70 Results are given on the log (not the response) scale. Confidence level used: 0.95 $contrasts contrast estimate SE df z.ratio p.value D_ileum - F_colon -1.3324 0.370 Inf -3.603 0.0018 D_ileum - K_ileum 2.7051 0.434 Inf 6.231 &lt;.0001 D_ileum - M_colon 0.0598 0.365 Inf 0.164 0.9984 F_colon - K_ileum 4.0375 0.438 Inf 9.216 &lt;.0001 F_colon - M_colon 1.3922 0.370 Inf 3.762 0.0010 K_ileum - M_colon -2.6453 0.434 Inf -6.090 &lt;.0001 Results are given on the log (not the response) scale. P value adjustment: tukey method for comparing a family of 4 estimates K_ileum has the lowest richness, F_colon the highest, and D_ileum / M_colon are intermediate. summary(Modelq0_Loca) Call: MASS::glm.nb(formula = richness ~ gut_location, data = alpha_div_meta, trace = TRUE, init.theta = 1.314009242, link = log) Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) 3.25167 0.25816 12.596 &lt; 2e-16 *** gut_locationF_colon 1.33237 0.36981 3.603 0.000315 *** gut_locationK_ileum -2.70512 0.43412 -6.231 4.63e-10 *** gut_locationM_colon -0.05982 0.36536 -0.164 0.869948 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 (Dispersion parameter for Negative Binomial(1.314) family taken to be 1) Null deviance: 123.001 on 45 degrees of freedom Residual deviance: 46.922 on 42 degrees of freedom AIC: 374.38 Number of Fisher Scoring iterations: 1 Theta: 1.314 Std. Err.: 0.279 2 x log-likelihood: -364.384 6.2.2.2 Neutral In this case neutral diversity is measured with the exponential of the Shannon entropy (Hill q =1), this means that the data is likely continuous (unlike richness, which is counts), and often has a normal distribution, therefore, we can use a linear model (lm). Modelq1_Loca &lt;- lm(formula = neutral ~ gut_location, data = alpha_div_meta) anova(Modelq1_Loca) Analysis of Variance Table Response: neutral Df Sum Sq Mean Sq F value Pr(&gt;F) gut_location 3 10650 3550.2 35.766 1.22e-11 *** Residuals 42 4169 99.3 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1_Loca) R2m R2c [1,] 0.7045247 0.7045247 emmeans(Modelq1_Loca, pairwise ~ gut_location) $emmeans gut_location emmean SE df lower.CL upper.CL D_ileum 11.34 2.88 42 5.53 17.14 F_colon 42.50 3.00 42 36.44 48.57 K_ileum 1.15 3.00 42 -4.91 7.22 M_colon 11.49 2.88 42 5.68 17.29 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value D_ileum - F_colon -31.169 4.16 42 -7.495 &lt;.0001 D_ileum - K_ileum 10.182 4.16 42 2.448 0.0834 D_ileum - M_colon -0.151 4.07 42 -0.037 1.0000 F_colon - K_ileum 41.351 4.25 42 9.734 &lt;.0001 F_colon - M_colon 31.018 4.16 42 7.458 &lt;.0001 K_ileum - M_colon -10.333 4.16 42 -2.485 0.0771 P value adjustment: tukey method for comparing a family of 4 estimates The p-value (1.22e-11) is much lower than 0.05, suggesting that gut_location significantly affects neutral diversity. R2m= 0.7045, which means that about 70% of the variation in neutral diversity is explained by gut location. F_colon has the highest neutral diversity (≈42.5). K_ileum has the lowest (≈1.15). D_ileum and M_colon are similar (≈11.3–11.5). 6.2.2.3 Phylogenetic Modelq1p_Loca &lt;- lm(formula = phylogenetic ~ gut_location, data = alpha_div_meta) anova(Modelq1p_Loca) Analysis of Variance Table Response: phylogenetic Df Sum Sq Mean Sq F value Pr(&gt;F) gut_location 3 167.77 55.923 21.796 1.143e-08 *** Residuals 42 107.76 2.566 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1p_Loca) R2m R2c [1,] 0.5923431 0.5923431 emmeans(Modelq1p_Loca, pairwise ~ gut_location) $emmeans gut_location emmean SE df lower.CL upper.CL D_ileum 3.03 0.462 42 2.099 3.97 F_colon 6.54 0.483 42 5.570 7.52 K_ileum 1.11 0.483 42 0.138 2.09 M_colon 3.30 0.462 42 2.366 4.23 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value D_ileum - F_colon -3.512 0.669 42 -5.253 &lt;.0001 D_ileum - K_ileum 1.920 0.669 42 2.871 0.0312 D_ileum - M_colon -0.267 0.654 42 -0.408 0.9767 F_colon - K_ileum 5.432 0.683 42 7.953 &lt;.0001 F_colon - M_colon 3.245 0.669 42 4.854 0.0001 K_ileum - M_colon -2.187 0.669 42 -3.271 0.0111 P value adjustment: tukey method for comparing a family of 4 estimates 6.2.2.4 Functional Modelq1F_Loca &lt;- lm(formula = functional ~ gut_location, data = alpha_div_meta) anova(Modelq1F_Loca) Analysis of Variance Table Response: functional Df Sum Sq Mean Sq F value Pr(&gt;F) gut_location 3 1.35326 0.45109 22.264 8.729e-09 *** Residuals 42 0.85094 0.02026 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1F_Loca) R2m R2c [1,] 0.5974711 0.5974711 emmeans(Modelq1F_Loca, pairwise ~ gut_location) $emmeans gut_location emmean SE df lower.CL upper.CL D_ileum 1.39 0.0411 42 1.311 1.48 F_colon 1.51 0.0429 42 1.418 1.59 K_ileum 1.03 0.0429 42 0.947 1.12 M_colon 1.28 0.0411 42 1.195 1.36 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value D_ileum - F_colon -0.111 0.0594 42 -1.866 0.2582 D_ileum - K_ileum 0.360 0.0594 42 6.066 &lt;.0001 D_ileum - M_colon 0.116 0.0581 42 1.992 0.2072 F_colon - K_ileum 0.471 0.0607 42 7.765 &lt;.0001 F_colon - M_colon 0.227 0.0594 42 3.814 0.0024 K_ileum - M_colon -0.245 0.0594 42 -4.118 0.0010 P value adjustment: tukey method for comparing a family of 4 estimates 6.3 By behaviour and location 6.3.1 Plots 6.3.1.1 Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(gut_location)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = fox_behaviour, group=fox_behaviour, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot(outlier.shape = NA, alpha = 0.5) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + scale_fill_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + facet_wrap(. ~ gut_location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) )+ labs(title= &quot;Richness by gut location and fox behaviour&quot;) 6.3.1.2 Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(gut_location)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = fox_behaviour, group=fox_behaviour, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot(outlier.shape = NA, alpha = 0.5) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + scale_fill_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + facet_wrap(. ~ gut_location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) )+ labs(title= &quot;Neutral diversity by gut location and fox behaviour&quot;) 6.3.1.3 Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(gut_location)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = fox_behaviour, group=fox_behaviour, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot(outlier.shape = NA, alpha = 0.5) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + scale_fill_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + facet_wrap(. ~ gut_location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) )+ labs(title= &quot;Phylogenetic diversity by gut location and fox behaviour&quot;) 6.3.1.4 Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(gut_location)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = fox_behaviour, group=fox_behaviour, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot(outlier.shape = NA, alpha = 0.5) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + scale_fill_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + facet_wrap(. ~ gut_location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) )+ labs(title= &quot;Functional diversity by gut location and fox behaviour&quot;) 6.3.2 Mixed models 6.3.2.1 Richness Model_richness &lt;- glmer.nb(richness ~ fox_behaviour+(1|gut_location), data = alpha_div_meta) summary(Model_richness) Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] Family: Negative Binomial(1.3513) ( log ) Formula: richness ~ fox_behaviour + (1 | gut_location) Data: alpha_div_meta AIC BIC logLik -2*log(L) df.resid 386.7 395.8 -188.3 376.7 41 Scaled residuals: Min 1Q Median 3Q Max -1.0886 -0.6944 -0.1725 0.3584 3.2176 Random effects: Groups Name Variance Std.Dev. gut_location (Intercept) 2.059 1.435 Number of obs: 46, groups: gut_location, 4 Fixed effects: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) 3.0142 0.7503 4.017 5.89e-05 *** fox_behaviourtame -0.4865 0.3047 -1.596 0.110 fox_behaviourunsel 0.3134 0.3846 0.815 0.415 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) fx_bhvrt fox_behvrtm -0.207 fox_bhvrnsl -0.161 0.394 emmeans(Model_richness, pairwise ~ fox_behaviour) $emmeans fox_behaviour emmean SE df asymp.LCL asymp.UCL aggr 3.01 0.750 Inf 1.54 4.48 tame 2.53 0.749 Inf 1.06 4.00 unsel 3.33 0.786 Inf 1.79 4.87 Results are given on the log (not the response) scale. Confidence level used: 0.95 $contrasts contrast estimate SE df z.ratio p.value aggr - tame 0.486 0.305 Inf 1.596 0.2472 aggr - unsel -0.313 0.385 Inf -0.815 0.6938 tame - unsel -0.800 0.385 Inf -2.077 0.0946 Results are given on the log (not the response) scale. P value adjustment: tukey method for comparing a family of 3 estimates There is no significant effect of fox behaviour on the richness. 6.3.2.2 Neutral Model_neutral &lt;- lme(fixed = neutral ~ fox_behaviour, data = alpha_div_meta, random = ~ 1 | gut_location)#log(seq_depth)+ summary(Model_neutral) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 346.8649 355.6709 -168.4324 Random effects: Formula: ~1 | gut_location (Intercept) Residual StdDev: 17.6769 9.756911 Fixed effects: neutral ~ fox_behaviour Value Std.Error DF t-value p-value (Intercept) 16.993796 9.134109 40 1.8604766 0.0702 fox_behaviourtame -2.880201 3.173896 40 -0.9074655 0.3696 fox_behaviourunsel 5.023322 4.148905 40 1.2107584 0.2331 Correlation: (Intr) fx_bhvrt fox_behaviourtame -0.183 fox_behaviourunsel -0.140 0.404 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.62821779 -0.78911686 -0.04122328 0.46700583 2.23438491 Number of Observations: 46 Number of Groups: 4 6.3.2.3 Phylogenetic Model_phylo &lt;- lme(fixed = phylogenetic ~ fox_behaviour, data = alpha_div_meta, random = ~ 1 | gut_location) summary(Model_phylo) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 188.6297 197.4357 -89.31487 Random effects: Formula: ~1 | gut_location (Intercept) Residual StdDev: 2.20058 1.577186 Fixed effects: phylogenetic ~ fox_behaviour Value Std.Error DF t-value p-value (Intercept) 3.518775 1.161669 40 3.0290686 0.0043 fox_behaviourtame -0.380035 0.513043 40 -0.7407461 0.4632 fox_behaviourunsel 0.822181 0.670654 40 1.2259398 0.2274 Correlation: (Intr) fx_bhvrt fox_behaviourtame -0.233 fox_behaviourunsel -0.178 0.404 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.47646378 -0.74894597 0.02329104 0.31903019 2.12465637 Number of Observations: 46 Number of Groups: 4 6.3.2.4 Functional Model_func &lt;- lme(fixed = functional ~ fox_behaviour, data = alpha_div_meta, random = ~ 1 | gut_location) summary(Model_func) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik -18.20571 -9.399711 14.10286 Random effects: Formula: ~1 | gut_location (Intercept) Residual StdDev: 0.197249 0.1424272 Fixed effects: functional ~ fox_behaviour Value Std.Error DF t-value p-value (Intercept) 1.2866404 0.10420652 40 12.347024 0.0000 fox_behaviourtame 0.0054055 0.04633013 40 0.116674 0.9077 fox_behaviourunsel 0.0799250 0.06056314 40 1.319697 0.1944 Correlation: (Intr) fx_bhvrt fox_behaviourtame -0.235 fox_behaviourunsel -0.179 0.404 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -2.3122951 -0.4504445 -0.0874495 0.5457938 1.8860386 Number of Observations: 46 Number of Groups: 4 detach(&quot;package:pscl&quot;, unload = TRUE) detach(&quot;package:MuMIn&quot;, unload = TRUE) detach(&quot;package:MASS&quot;, unload = TRUE) Warning: namespace &#39;MASS&#39; no puede ser descargado: namespace &#39;MASS&#39; is imported by &#39;lmerTest&#39;, &#39;clusterGeneration&#39;, &#39;vegan&#39;, &#39;ANCOMBC&#39;, &#39;lme4&#39;, &#39;multtest&#39;, &#39;mia&#39;, &#39;geiger&#39;, &#39;DescTools&#39;, &#39;ade4&#39;, &#39;TH.data&#39;, &#39;phytools&#39; so cannot be unloaded detach(&quot;package:hilldiv2&quot;, unload = TRUE) "],["beta-diversity.html", "Chapter 7 Beta diversity", " Chapter 7 Beta diversity load(&quot;data/data.Rdata&quot;) behaviour_colors &lt;- c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot; ) sample_metadata &lt;- sample_metadata %&gt;% filter(sample %in% colnames(genome_counts_filt)) library(hilldiv2) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) #hill pair (beta divesity) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) genome_counts_filt_beta &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0))%&gt;% rownames_to_column(., &quot;genome&quot;) genome_tree &lt;- keep.tip(genome_tree, tip=genome_counts_filt_beta$genome) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) genome_gifts1 &lt;- genome_gifts[genome_counts_filt_beta$genome,] genome_gifts1 &lt;- genome_gifts1[, colSums(genome_gifts1 != 0) &gt; 0] dist &lt;- genome_gifts1 %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) set.seed(2024) load(&quot;data/beta.Rdata&quot;) 7.0.1 Permanova 7.0.1.1 Richness The permanova test assumes within-group dispersions are equal, so before doing this test, we must check the dispersion (variances) of each of the variables. betadisper(beta_q0n$S, sample_metadata$fox_behaviour) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.05431 0.027155 2.3627 999 0.107 Residuals 43 0.49420 0.011493 betadisper(beta_q0n$S, sample_metadata$gut_location) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 1.0776 0.35921 14.463 999 0.001 *** Residuals 42 1.0432 0.02484 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #Richness adonis2(beta_q0n$S ~ fox_behaviour+gut_location, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_eg5iwxzigc1ordmdx4r4, .table th.tinytable_css_eg5iwxzigc1ordmdx4r4 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_xfncau4nxknhb6kf8xn5, .table th.tinytable_css_xfncau4nxknhb6kf8xn5 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value fox_behaviour 2 0.7825353 0.04917873 1.739559 0.062 gut_location 3 6.1325920 0.38540508 9.088411 0.001 Residual 40 8.9969411 0.56541619 NA NA Total 45 15.9120684 1.00000000 NA NA pairwise.adonis(beta_q0n$S, sample_metadata$fox_behaviour, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 tame vs aggr 1 0.3562095 0.9847508 0.02662586 0.375 1.000 2 tame vs unsel 1 0.5551591 1.5945065 0.05778348 0.126 0.378 3 aggr vs unsel 1 0.2660081 0.7800316 0.03147823 0.503 1.000 pairwise.adonis(beta_q0n$S, sample_metadata$gut_location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 K_ileum vs D_ileum 1 2.0999028 8.728723 0.2936125 0.001 0.006 * 2 K_ileum vs F_colon 1 4.4051839 46.802248 0.7006089 0.001 0.006 * 3 K_ileum vs M_colon 1 1.5958589 6.863418 0.2463236 0.001 0.006 * 4 D_ileum vs F_colon 1 1.6943456 7.242188 0.2564315 0.001 0.006 * 5 D_ileum vs M_colon 1 0.9359521 2.602023 0.1057646 0.010 0.060 6 F_colon vs M_colon 1 1.6519235 7.312706 0.2582835 0.001 0.006 * 7.0.1.2 Neutral #Neutral diversity betadisper(beta_q1n$S, sample_metadata$fox_behaviour) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.07802 0.039012 0.7095 999 0.496 Residuals 43 2.36440 0.054986 betadisper(beta_q1n$S, sample_metadata$gut_location) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 1.53752 0.51251 26.845 999 0.001 *** Residuals 42 0.80183 0.01909 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #Neutral diversity adonis2(beta_q1n$S ~ fox_behaviour +gut_location, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_l03jfgaeyumsxkbk4kqh, .table th.tinytable_css_l03jfgaeyumsxkbk4kqh { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_l383gqo4v7i8ec2e0zap, .table th.tinytable_css_l383gqo4v7i8ec2e0zap { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value fox_behaviour 2 0.5878185 0.05087496 2.329149 0.065 gut_location 3 5.9188680 0.51227064 15.635129 0.001 Residual 40 5.0474952 0.43685441 NA NA Total 45 11.5541817 1.00000000 NA NA pairwise.adonis(beta_q1n$S, sample_metadata$fox_behaviour, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 tame vs aggr 1 0.2903289 1.0883705 0.02934533 0.303 0.909 2 tame vs unsel 1 0.4021091 1.6575473 0.05993110 0.168 0.504 3 aggr vs unsel 1 0.1826192 0.7277943 0.02943224 0.485 1.000 7.0.1.3 Phylogenetic #Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$fox_behaviour) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.06047 0.030237 0.9492 999 0.404 Residuals 43 1.36981 0.031856 betadisper(beta_q1p$S, sample_metadata$gut_location) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.95298 0.31766 18.558 999 0.001 *** Residuals 42 0.71892 0.01712 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #Phylogenetic diversity adonis2(beta_q1p$S ~ fox_behaviour+ gut_location, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_ewj3tumfln53ypqam559, .table th.tinytable_css_ewj3tumfln53ypqam559 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_288esyyfj6agencqxwtu, .table th.tinytable_css_288esyyfj6agencqxwtu { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value fox_behaviour 2 0.3794287 0.05178089 2.492071 0.045 gut_location 3 3.9030657 0.53265400 17.090110 0.001 Residual 40 3.0450873 0.41556511 NA NA Total 45 7.3275817 1.00000000 NA NA pairwise.adonis(beta_q1p$S, sample_metadata$fox_behaviour, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 tame vs aggr 1 0.16506690 0.9826933 0.02657171 0.353 1.000 2 tame vs unsel 1 0.30829662 2.0858230 0.07426605 0.129 0.387 3 aggr vs unsel 1 0.09803357 0.5872774 0.02388542 0.545 1.000 pairwise.adonis(beta_q1p$S, sample_metadata$gut_location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 K_ileum vs D_ileum 1 1.207405 11.239217 0.3486194 0.001 0.006 * 2 K_ileum vs F_colon 1 3.040599 281.693909 0.9337076 0.001 0.006 * 3 K_ileum vs M_colon 1 0.446189 9.615557 0.3140742 0.003 0.018 . 4 D_ileum vs F_colon 1 1.114288 9.540696 0.3123929 0.002 0.012 . 5 D_ileum vs M_colon 1 0.791897 5.425242 0.1978193 0.004 0.024 . 6 F_colon vs M_colon 1 1.298322 23.280729 0.5257531 0.002 0.012 . 7.0.1.4 Functional #Functional diversity betadisper(beta_q1f$S, sample_metadata$fox_behaviour) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.02976 0.014878 0.3215 999 0.734 Residuals 43 1.99003 0.046280 betadisper(beta_q1f$S, sample_metadata$gut_location) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.41181 0.13727 4.1123 999 0.014 * Residuals 42 1.40196 0.03338 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #Functional diversity adonis2(beta_q1f$S ~ fox_behaviour+ gut_location, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_4ozmngfv71zdfbpm60cs, .table th.tinytable_css_4ozmngfv71zdfbpm60cs { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_gzwravklpapex6v5ihxd, .table th.tinytable_css_gzwravklpapex6v5ihxd { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value fox_behaviour 2 0.1378307 0.01798362 1.066254 0.349 gut_location 3 4.9410817 0.64469315 25.482706 0.001 Residual 40 2.5853255 0.33732323 NA NA Total 45 7.6642379 1.00000000 NA NA pairwise.adonis(beta_q1f$S, sample_metadata$fox_behaviour, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 tame vs aggr 1 0.06764083 0.3798683 0.01044172 0.611 1 2 tame vs unsel 1 0.07835157 0.4880544 0.01842545 0.557 1 3 aggr vs unsel 1 0.06061608 0.3255638 0.01338361 0.653 1 pairwise.adonis(beta_q1f$S, sample_metadata$gut_location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 K_ileum vs D_ileum 1 1.4924134 21.729688 0.5085384 0.001 0.006 * 2 K_ileum vs F_colon 1 3.9491603 204.127340 0.9107650 0.001 0.006 * 3 K_ileum vs M_colon 1 0.1228807 2.490336 0.1060154 0.142 0.852 4 D_ileum vs F_colon 1 0.9256356 11.421302 0.3522777 0.002 0.012 . 5 D_ileum vs M_colon 1 0.7091245 6.635195 0.2317147 0.007 0.042 . 6 F_colon vs M_colon 1 2.7938493 45.276168 0.6831440 0.001 0.006 * 7.0.2 NMDS: Non-metric Multidimensional Scaling 7.0.2.1 Richness beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% #2D ordination vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(fox_behaviour) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% #centroids mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = fox_behaviour, shape = as.factor(gut_location))) + geom_point(size = 4) + scale_color_manual(values = c( tame = &quot;#1f77b4&quot;, aggr = &quot;#d62728&quot;, unsel = &quot;#2ca02c&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Fox behaviour&quot;, shape=&quot;Gut Location&quot;)+geom_text_repel(aes(label = sample), size=3) 7.0.2.2 Richness between gut locations beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(gut_location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = gut_location, shape = as.factor(fox_behaviour))) + geom_point(size = 4) + scale_color_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Gut location&quot;, shape=&quot;Fox Behaviour&quot;)+geom_text_repel(aes(label = sample), size=3) 7.0.2.3 Neutral diversity beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(fox_behaviour) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = fox_behaviour, shape = as.factor(gut_location))) + geom_point(size = 4) + scale_color_manual(values = behaviour_colors,labels=c(&quot;tame&quot; = &quot;Tame&quot;, &quot;aggr&quot; = &quot;Aggressive&quot;, &quot;unsel&quot; = &quot;Unselected&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Fox Behaviour&quot;, shape=&quot;Gut Location&quot;) ####Neutral diversity by gut location beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(gut_location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = gut_location, shape = as.factor(fox_behaviour))) + geom_point(size = 4) + scale_color_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Gut location&quot;, shape=&quot;Fox Behaviour&quot;) 7.0.2.4 Phylogenetic diversity beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(fox_behaviour) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = fox_behaviour, shape = as.factor(gut_location))) + geom_point(size = 4) + scale_color_manual(values = behaviour_colors,labels=c(&quot;tame&quot; = &quot;Tame&quot;, &quot;aggr&quot; = &quot;Aggressive&quot;, &quot;unsel&quot; = &quot;Unselected&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Fox Behaviour&quot;, shape=&quot;Gut Location&quot;)+geom_text_repel(aes(label = sample), size=3) 7.0.2.5 Phylogenetic diversity by gut location beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(gut_location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = gut_location, shape = as.factor(fox_behaviour))) + geom_point(size = 4) + scale_color_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Gut location&quot;, shape=&quot;Fox Behaviour&quot;)+geom_text_repel(aes(label = sample), size=3) 7.0.2.6 Functional diversity beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(fox_behaviour) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = fox_behaviour, shape = as.factor(gut_location))) + geom_point(size = 4) + scale_color_manual(values = behaviour_colors,labels=c(&quot;tame&quot; = &quot;Tame&quot;, &quot;aggr&quot; = &quot;Aggressive&quot;, &quot;unsel&quot; = &quot;Unselected&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Fox Behaviour&quot;, shape=&quot;Gut Location&quot;)+geom_text_repel(aes(label = sample), size=3) 7.0.2.7 Functional diversity by gut location beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(gut_location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = gut_location, shape = as.factor(fox_behaviour))) + geom_point(size = 4) + scale_color_manual(values = c( F_colon = &quot;#d6604d&quot;, M_colon = &quot;#542788&quot;, D_ileum = &quot;#fdb863&quot;, K_ileum = &quot;#bb99d8&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Gut location&quot;, shape=&quot;Fox Behaviour&quot;)+geom_text_repel(aes(label = sample), size=3) "],["differential-abundance-analysis.html", "Chapter 8 Differential abundance analysis 8.1 Load the data 8.2 Create Phyloseq object 8.3 Run ANCOM-BC2 (fox behaviour) 8.4 Phylum comparisons 8.5 Genus 8.6 Run ANCOM-BC2 (gut location) 8.7 Volcano plots", " Chapter 8 Differential abundance analysis 8.1 Load the data load(&quot;data/data.Rdata&quot;) genome_counts_filt &lt;- genome_counts_filt %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) sample_metadata &lt;- sample_metadata %&gt;% filter(sample %in% colnames(genome_counts_filt)) 8.2 Create Phyloseq object # Reorder levels: set &quot;unsel&quot; as reference sample_metadata$fox_behaviour &lt;- factor( sample_metadata$fox_behaviour, levels = c(&quot;unsel&quot;, &quot;aggr&quot;, &quot;tame&quot;) #here we set unsel as reference level ) #Phyloseq object count_phy &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;)%&gt;% otu_table(., taxa_are_rows=T) sample_info_tab_phy &lt;- sample_metadata%&gt;% column_to_rownames(var=&quot;sample&quot;)%&gt;% sample_data() TAX &lt;- genome_metadata%&gt;% column_to_rownames(var=&quot;genome&quot;)%&gt;% select(1:7)%&gt;% as.matrix()%&gt;% tax_table() tree &lt;- phy_tree(genome_tree) physeq_all = phyloseq(count_phy, TAX, sample_info_tab_phy, tree) 8.3 Run ANCOM-BC2 (fox behaviour) Analysis of Composition of Microbes with Bias Correction set.seed(1234) #set seed for reproducibility ancom_mag_gut = ancombc2(data = physeq_all, assay_name = &quot;counts&quot;, tax_level = NULL, fix_formula = &quot;fox_behaviour + gut_location&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut =0, lib_cut = 0, s0_perc = 0.05, group = &quot;fox_behaviour&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = TRUE, #to get all pairwise comparisons dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) 8.4 Phylum comparisons 8.4.1 Aggressive vs Unselected taxonomy &lt;- data.frame(physeq_all@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;)%&gt;% mutate_at(vars(order, phylum, family, genus), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) ancom_mag_gut_table &lt;- ancom_mag_gut$res %&gt;% dplyr::select(taxon, lfc_fox_behaviouraggr, p_fox_behaviouraggr) %&gt;% filter( p_fox_behaviouraggr &lt; 0.05) %&gt;% dplyr::arrange( p_fox_behaviouraggr) %&gt;% merge(., taxonomy, by=&quot;taxon&quot;) %&gt;% rename(genome=taxon) %&gt;% mutate_at(vars(phylum, genus), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::arrange(lfc_fox_behaviouraggr) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) %&gt;% right_join(taxonomy, by=join_by(phylum == phylum)) %&gt;% dplyr::select(phylum, colors) %&gt;% mutate(colors = str_c(colors, &quot;80&quot;)) %&gt;% #add 80% alpha unique() %&gt;% dplyr::arrange(phylum) tax_table &lt;- as.data.frame(unique(taxonomy$phylum)) # use all phyla from full taxonomy colnames(tax_table)[1] &lt;- &quot;phylum&quot; tax_color &lt;- merge(tax_table, colors_alphabetic, by=&quot;phylum&quot;) %&gt;% arrange(phylum) %&gt;% dplyr::select(colors) %&gt;% pull() ancom_mag_gut_table %&gt;% mutate(genome=factor(genome,levels=ancom_mag_gut_table$genome)) %&gt;% ggplot(aes(x=lfc_fox_behaviouraggr, y=forcats::fct_reorder(genome,lfc_fox_behaviouraggr), fill=phylum)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=tax_color) + geom_vline(xintercept=0) + # coord_flip()+ theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 8), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ labs(title = &quot;Aggressive vs Unselected&quot;)+ xlab(&quot;log2FoldChange (aggr vs unsel)&quot;) + ylab(&quot;Species&quot;)+ guides(fill=guide_legend(title=&quot;Phylum&quot;)) 8.4.2 Tame vs Unselected ancom_mag_gut_table_tame_unsel &lt;- ancom_mag_gut$res %&gt;% dplyr::select(taxon, lfc_fox_behaviourtame, p_fox_behaviourtame) %&gt;% filter(p_fox_behaviourtame &lt; 0.05) %&gt;% arrange(p_fox_behaviourtame) %&gt;% merge(taxonomy, by=&quot;taxon&quot;) %&gt;% rename(genome=taxon) %&gt;% arrange(lfc_fox_behaviourtame) ggplot(ancom_mag_gut_table_tame_unsel, aes(x=lfc_fox_behaviourtame, y=fct_reorder(genome, lfc_fox_behaviourtame), fill=phylum)) + geom_col() + geom_vline(xintercept=0) + scale_fill_manual(values=tax_color) + labs(x=&quot;log2 Fold Change (tame vs unsel)&quot;, y=&quot;Species&quot;, title = &quot;Tame vs Unselected&quot;)+ theme_bw() ancom_mag_results &lt;- ancom_mag_gut$res 8.5 Genus 8.5.1 Aggressive vs Unselected ggplot(ancom_mag_gut_table, aes(x=lfc_fox_behaviouraggr, y=fct_reorder(genome, lfc_fox_behaviouraggr), fill=genus)) + geom_col() + geom_vline(xintercept=0) + labs(x=&quot;log2 Fold Change (aggr vs unsel)&quot;, y=&quot;Species&quot;, title = &quot;Aggressive vs Unselected&quot;)+ theme_bw() 8.5.2 Tame vs Unselected ggplot(ancom_mag_gut_table_tame_unsel, aes(x=lfc_fox_behaviourtame, y=fct_reorder(genome, lfc_fox_behaviourtame), fill=genus)) + geom_col() + geom_vline(xintercept=0) + labs(x=&quot;log2 Fold Change (tame vs unsel)&quot;, y=&quot;Species&quot;, title = &quot;Tame vs Unselected&quot;)+ theme_bw() 8.6 Run ANCOM-BC2 (gut location) Analysis of Composition of Microbes with Bias Correction set.seed(1234) #set seed for reproducibility ancom_mag_gut_location = ancombc2(data = physeq_all, assay_name = &quot;counts&quot;, tax_level = NULL, fix_formula = &quot;gut_location+ fox_behaviour&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut =0, lib_cut = 0, s0_perc = 0.05, group = &quot;gut_location&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = TRUE, #to get all pairwise comparisons dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) ancom_mag_gut_table_fcolon_dileum &lt;- ancom_mag_gut_location$res %&gt;% dplyr::select(taxon, lfc_gut_locationF_colon, p_gut_locationF_colon, q_gut_locationF_colon) %&gt;% filter(p_gut_locationF_colon &lt; 0.05) %&gt;% arrange(p_gut_locationF_colon) %&gt;% merge(taxonomy, by=&quot;taxon&quot;) %&gt;% rename(genome=taxon) %&gt;% arrange(lfc_gut_locationF_colon) ggplot(ancom_mag_gut_table_fcolon_dileum, aes(x=lfc_gut_locationF_colon, y=fct_reorder(genome, lfc_gut_locationF_colon), fill=phylum)) + geom_col() + geom_vline(xintercept=0) + scale_fill_manual(values=tax_color) + labs(x=&quot;log2 Fold Change (D_ileum vs F_colon)&quot;, y=&quot;Species&quot;, title = &quot;D_ileum vs F_colon&quot;)+ theme_bw() ancom_mag_gut_table_kileum_dileum &lt;- ancom_mag_gut_location$res %&gt;% dplyr::select(taxon, lfc_gut_locationK_ileum, p_gut_locationK_ileum, q_gut_locationK_ileum) %&gt;% filter(p_gut_locationK_ileum &lt; 0.05) %&gt;% arrange(p_gut_locationK_ileum) %&gt;% merge(taxonomy, by=&quot;taxon&quot;) %&gt;% rename(genome=taxon) %&gt;% arrange(lfc_gut_locationK_ileum) ggplot(ancom_mag_gut_table_kileum_dileum, aes(x=lfc_gut_locationK_ileum, y=fct_reorder(genome, lfc_gut_locationK_ileum), fill=phylum)) + geom_col() + geom_vline(xintercept=0) + scale_fill_manual(values=tax_color) + labs(x=&quot;log2 Fold Change (D_ileum vs K_ileum)&quot;, y=&quot;Species&quot;, title = &quot;D_ileum vs K_ileum&quot;)+ theme_bw() 8.7 Volcano plots phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) #pdf(&quot;figures/different_species_StrucZero_new_violin.pdf&quot;,width=12, height=6) ancom_mag_gut$res %&gt;% dplyr::select(genome=taxon, lfc_fox_behaviouraggr, p_fox_behaviouraggr) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% mutate(phylum = ifelse(p_fox_behaviouraggr &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = lfc_fox_behaviouraggr, y = -log(p_fox_behaviouraggr), color = phylum)) + geom_point(size=3, show.legend = FALSE) + #xlim(c(-10,4)) + scale_color_manual(values = phylum_colors) + labs(color = &quot;Significant phylum&quot;, x = &quot;Log-fold difference (aggr vs unsel)&quot;, y = &quot;-log(p-value)&quot;) + theme_classic() #dev.off() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
