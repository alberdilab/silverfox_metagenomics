[["index.html", "AlberdiLab | Silver fox metagenomics MSc project Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Silver fox metagenomics MSc project Irene Martínez, M Thomas P Gilbert, Antton Alberdi1 Last update: 2025-09-10 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/silverfox_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) library(janitor) library(broom) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) library(viridis) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(nlme) library(pairwiseAdonis) library(emmeans) library(pheatmap) library(rstatix) library(uwot) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% rename(sample =1, gut_location = 2, fox_behaviour = 3, fox_sex = 4, sample_type = 5, year = 6) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/counts.tsv&quot;) %&gt;% rename(genome=1)%&gt;% select(any_of(c(&quot;genome&quot;, sample_metadata$sample))) 2.1.3 Filter read counts read_counts_filt &lt;- read_counts %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.4 Genome info genome_info &lt;- read_csv(&quot;data/genomeInfo.csv&quot;) %&gt;% mutate(genome = gsub(&quot;.fa$&quot;, &quot;&quot;, genome)) %&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.5 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/genome_taxonomy.tsv&quot;) %&gt;% rename(genome = 1) genome_taxonomy_expanded &lt;- genome_taxonomy %&gt;% separate(classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;, fill = &quot;right&quot;, remove = FALSE) %&gt;% mutate(across(domain:species, ~ str_replace(.x, &quot;^[a-z]__&quot;, &quot;&quot;)))%&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.6 Genome metadata genome_metadata &lt;- genome_taxonomy_expanded %&gt;% left_join(genome_info, by = &quot;genome&quot;) 2.1.7 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/bases.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% left_join(genome_info %&gt;% select(genome, length), by = &quot;genome&quot;) %&gt;% mutate(across(where(is.numeric), ~ .x / length)) 2.1.8 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.9 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/gene_annotations.tsv.xz&quot;) %&gt;% mutate(genome = sub(&quot;\\\\^.*&quot;, &quot;&quot;, gene)) %&gt;% select(1, genome, everything()) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% select(-length) %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol= 2, annotcol=c(6,7,8,9), verbosity = F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) location_colors &lt;- c(&#39;#3D5C61&#39;,&#39;#41B6C0&#39;,&#39;#90C8C5&#39;,&#39;#E5D388&#39;,&#39;#BFA366&#39;,&#39;#6E5244&#39;) origin_colors &lt;- c(&quot;#bd70ae&quot;,&quot;#949293&quot;) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_annotations, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, location_colors, origin_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics", " Chapter 3 Data statistics ##Microbiota load(&quot;data/data.Rdata&quot;) 3.0.1 Sequencing reads statistics preprocessing &lt;- read_tsv(&quot;data/preprocessing.tsv&quot;) Rows: 48 Columns: 9 ── Column specification ──────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): sample dbl (8): reads_raw, reads_discarded, reads_host, reads_metagenomic, bases_raw, bases_discarded, bases_host, base... ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. preprocessing %&gt;% summarise(Total=sum(reads_metagenomic * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_metagenomic * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_metagenomic * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_jxupw90hnypq8b0wyti6, .table th.tinytable_css_jxupw90hnypq8b0wyti6 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_hqgs4rzdn6vii7cvejk2, .table th.tinytable_css_hqgs4rzdn6vii7cvejk2 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Total Average 96.56 2.01 ± 2.86 3.0.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(preprocessing, by = join_by(sample == sample)) %&gt;% select(sample,mags,bases_metagenomic,bases_host ,bases_discarded, bases_raw) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(bases_discarded_proportion = bases_discarded/bases_raw) %&gt;% mutate(lowqual_bases = ((bases_metagenomic+bases_host)/(1-bases_discarded_proportion))-(bases_metagenomic+bases_host)) %&gt;% mutate(unmapped_bases = bases_metagenomic - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, bases_host, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_khs84bmcg5eqz1fmdlw0, .table th.tinytable_css_khs84bmcg5eqz1fmdlw0 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_8kqgjkqmeei19dwh0bcc, .table th.tinytable_css_8kqgjkqmeei19dwh0bcc { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Sample Low quality Mapped to host Unmapped Mapped to MAGs fox10_D_37 2.6301023 8.1216298 0.88459923 1.65543326 fox10_F_39 2.2970487 2.8406966 2.77779874 4.80441528 fox10_K_38 0.5180657 8.8218626 0.04823171 0.05601246 fox10_M_40 0.5131760 9.5470219 0.22409171 0.36565627 fox14_D_1 1.5586674 7.5129415 0.20575144 0.47793027 fox14_F_3 3.0494709 3.4435576 1.62980735 3.32223394 fox14_K_2 0.5995430 5.6724002 0.02957405 0.03470770 fox14_M_4 0.3790174 5.2019894 0.03456248 0.04290575 fox16_D_33 1.8642653 16.0480617 0.11617587 0.11494288 fox16_F_35 1.8038610 8.1444304 1.65409742 3.60815903 fox16_K_34 0.8935251 6.1766422 0.03076079 0.03541931 fox16_M_36 0.7906496 7.2696400 0.04106251 0.06308295 fox1_D_17 1.0365225 9.5821911 0.41629582 0.68272520 fox1_K_18 1.2751933 13.7506079 0.07496196 0.10288401 fox1_M_20 0.3523016 2.9740678 0.01786800 0.02319049 fox22_D_29 0.8179759 3.9995783 1.18966373 7.16354957 fox22_F_31 1.2420612 0.5808306 3.04907749 6.16145112 fox22_K_30 1.4172912 10.1558721 0.05224991 0.06107603 fox22_M_32 0.7611953 9.4840202 0.31379754 0.58815662 fox24_D_5 2.2316394 10.1593674 0.12140898 0.47912002 fox24_F_7 1.4618429 7.2107388 0.35280228 0.64631557 fox24_K_6 0.5889175 11.1312892 0.05502918 0.06345175 fox24_M_8 0.5168462 9.9273909 0.05831746 0.08046586 fox26_D_41 4.8972087 11.8114623 0.57036670 0.15562082 fox26_F_43 3.2084935 4.3609827 2.43630187 2.91103049 fox26_K_42 0.5383661 9.6877966 0.06740662 0.06352402 fox26_M_44 0.8497864 11.0920109 0.28636408 0.43980879 fox29_D_9 2.7560848 7.8789344 0.17264936 0.36172230 fox29_F_11 1.5935373 5.6150417 0.70333918 0.93580540 fox29_K_10 0.8593511 6.4283843 0.03036465 0.03872504 fox29_M_12 0.6192141 5.8888423 0.03290705 0.04689389 fox30_D_13 3.7178316 9.4089714 0.63316607 0.37918361 fox30_F_15 1.5528117 4.8552355 2.51266195 3.40603999 fox30_K_14 0.5678181 9.7021594 0.05598970 0.06023989 fox30_M_16 0.7024185 10.0939226 0.29300930 0.44862749 fox3_D_25 1.7112057 13.1973431 0.18071781 0.38979255 fox3_F_27 1.5159373 2.0277157 1.24050570 2.83525985 fox3_M_28 1.4034647 7.1535047 0.04753161 0.08069362 fox5_D_10 2.7287199 13.6063868 0.61487849 1.54580318 fox5_F_12 1.8250414 4.3329962 1.55799919 3.72590584 fox5_K_11 0.3455828 3.3354846 0.01929405 0.01995294 fox5_M_9 0.2979118 3.3643827 0.02800099 0.02913255 fox8_D_21 2.3661247 4.0665726 2.66481434 5.19974240 fox8_F_23 2.5074581 2.2107557 2.67704976 4.26260403 fox8_K_22 0.6695787 11.3845138 0.07137123 0.08182030 fox8_M_24 0.5294341 9.9194827 0.17877318 0.33240900 #mean sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() Warning: There was 1 warning in `summarise()`. ℹ In argument: `across(where(is.numeric), mean, na.rm = TRUE)`. Caused by warning: ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0. Supply arguments directly to `.fns` through an anonymous function instead. # Previously across(a:b, mean, na.rm = TRUE) # Now across(a:b, \\(x) mean(x, na.rm = TRUE)) .table td.tinytable_css_xd53zptsiewi8ong62ke, .table th.tinytable_css_xd53zptsiewi8ong62ke { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_q8vqyoyxg8pmvqyczcqx, .table th.tinytable_css_q8vqyoyxg8pmvqyczcqx { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Low quality Mapped to host Unmapped Mapped to MAGs 1.442664 7.590863 0.6620315 1.269209 #SD sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), sd, na.rm = TRUE)) %&gt;% tt() .table td.tinytable_css_ait589kf6xo1irtqq17o, .table th.tinytable_css_ait589kf6xo1irtqq17o { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_i4yfs3zj1qhb656ifysx, .table th.tinytable_css_i4yfs3zj1qhb656ifysx { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Low quality Mapped to host Unmapped Mapped to MAGs 1.023265 3.559173 0.9109667 1.876046 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;bases_host&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue 4.1 Genome phylogeny Circular tree with genome size and completeness # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.05, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.24, pwidth = 0.1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Contamination&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() circular_tree &lt;- circular_tree + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), fill = &quot;#1e6e55&quot;, offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.15, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.6, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.8, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) Circular tree with genome presence/absence in different sample locations and fox behaviour # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate prevalence data prevalence_data &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% group_by(genome,gut_location) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,1,0)) %&gt;% group_by(genome) %&gt;% summarise(prevalence=sum(presence)) # Generate F_colon heatmap f_colon_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;F_colon&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate M_colon heatmap m_colon_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;M_colon&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate D_ileum heatmap d_ileum_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;D_ileum&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate K_ileum heatmap k_ileum_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(gut_location ==&quot;K_ileum&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Gut content heatmap gut_content_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(sample_type ==&quot;Gut content&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Gut tissue heatmap gut_tissue_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(sample_type ==&quot;Gut tissue&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate tame heatmap tame_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(fox_behaviour==&quot;tame&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate aggressive heatmap aggressive_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(fox_behaviour==&quot;aggr&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add F_colon ring circular_tree &lt;- gheatmap(circular_tree, f_colon_heatmap, offset=0.2, width=0.05, colnames=FALSE) + scale_fill_manual(values = c(&quot;absent&quot; = &quot;#ffffff&quot;, &quot;present&quot; = &quot;#3D5C61&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add M_colon ring circular_tree &lt;- gheatmap(circular_tree, m_colon_heatmap, offset=0.3, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#41B6C0&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add D_ileum ring circular_tree &lt;- gheatmap(circular_tree, d_ileum_heatmap, offset=0.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#90C8C5&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add K_ileum ring circular_tree &lt;- gheatmap(circular_tree, k_ileum_heatmap, offset=0.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;absent&quot; = &quot;#ffffff&quot;, &quot;present&quot; = &quot;#E5D388&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Gut content ring circular_tree &lt;- gheatmap(circular_tree, gut_content_heatmap, offset=0.7, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;absent&quot; =&quot;#ffffff&quot;,&quot;present&quot; = &quot;#BFA366&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Gut tissue ring circular_tree &lt;- gheatmap(circular_tree, gut_tissue_heatmap, offset=0.8, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#6E5244&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add prevalence ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=prevalence_data, geom=geom_bar, mapping = aes(x=prevalence, y=genome), offset = 0.5, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add tame ring circular_tree &lt;- gheatmap(circular_tree, tame_heatmap, offset=1.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#bd70ae&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add aggressive ring circular_tree &lt;- gheatmap(circular_tree, aggressive_heatmap, offset=1.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#949293&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.05, y= 0, label=&#39;Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=2.4, y=0, label=&#39;Gut location&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39;Prevalence&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x= 3.5,y=0, label=&#39;Fox behaviour&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.1.1 Taxonomy overview tax_mag &lt;-genome_metadata %&gt;% group_by(phylum) %&gt;% summarise(mag_n=n()) tax_mag %&gt;% mutate(percetage_mag=round(mag_n*100/sum(mag_n), 2)) %&gt;% arrange(-percetage_mag) %&gt;% tt() .table td.tinytable_css_juvjgx08nzzarffbattf, .table th.tinytable_css_juvjgx08nzzarffbattf { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_juzqbtqnqjjog5vm768b, .table th.tinytable_css_juzqbtqnqjjog5vm768b { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } phylum mag_n percetage_mag Bacillota_A 55 38.46 Bacteroidota 21 14.69 Bacillota 18 12.59 Bacillota_I 14 9.79 Pseudomonadota 10 6.99 Campylobacterota 6 4.20 Fusobacteriota 6 4.20 Actinomycetota 5 3.50 Bacillota_B 2 1.40 Desulfobacterota 2 1.40 Spirochaetota 2 1.40 Bacillota_C 1 0.70 Deferribacterota 1 0.70 4.1.2 Mag size (MB) genome_metadata &lt;- genome_metadata %&gt;% mutate(corrected_size=100*length/completeness) %&gt;% arrange(completeness) genome_metadata %&gt;% summarise(Average_corrected_size=mean(corrected_size)) # A tibble: 1 × 1 Average_corrected_size &lt;dbl&gt; 1 2515112. 4.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() .table td.tinytable_css_4vjv25lmphwyqo4fiofr, .table th.tinytable_css_4vjv25lmphwyqo4fiofr { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_q9n2wfizmlnf8gfsjw7b, .table th.tinytable_css_q9n2wfizmlnf8gfsjw7b { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Completeness Contamination 92.6±6.75 1.92±2.11 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% dplyr::select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.line = element_blank(), axis.title = element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.line = element_blank(), axis.title = element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure #pdf(&quot;figures/completeness_contamination.pdf&quot;,width=10, height=5) grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) #dev.off() 4.3 Functional overview 4.3.0.1 Predicted genes pred_genes &lt;- genome_annotations %&gt;% nrow() cat(pred_genes) 319804 4.3.0.2 Number of annotated genes and percentages #How many genes have at least 1 annotation genome_annota &lt;- genome_annotations %&gt;% filter(if_any(c(kegg, pfam, cazy), ~ !is.na(.))) %&gt;% nrow() cat(genome_annota) 257893 #Percentage of predicted genes with at least 1 annotation genome_annota*100/pred_genes [1] 80.64096 4.3.0.3 Number of KEGG annotatated genes and percentages # KEGG annotation kegg_annota &lt;- genome_annotations %&gt;% filter(!is.na(kegg)) %&gt;% nrow() cat(kegg_annota) 219314 # KEGG annotation percentage kegg_annota*100/genome_annota [1] 85.0407 4.3.0.4 Function tree # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination PCoA with Euclidean distances: gift_pcoa &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% vegdist(method=&quot;euclidean&quot;) %&gt;% pcoa() gift_pcoa_rel_eigen &lt;- gift_pcoa$values$Relative_eig[1:10] # Get genome positions gift_pcoa_vectors &lt;- gift_pcoa$vectors %&gt;% #extract vectors as.data.frame() %&gt;% select(Axis.1,Axis.2) # keep the first 2 axes gift_pcoa_eigenvalues &lt;- gift_pcoa$values$Eigenvalues[c(1,2)] #For the black arrows: Functional group loadings gift_pcoa_gifts &lt;- cov(genome_gifts, scale(gift_pcoa_vectors)) %*% diag((gift_pcoa_eigenvalues/(nrow(genome_gifts)-1))^(-0.5)) %&gt;% as.data.frame() %&gt;% rename(Axis.1=1,Axis.2=2) %&gt;% rownames_to_column(var=&quot;label&quot;) %&gt;% #get function summary vectors mutate(func=substr(label,1,3)) %&gt;% group_by(func) %&gt;% summarise(Axis.1=mean(Axis.1), Axis.2=mean(Axis.2)) %&gt;% rename(label=func) %&gt;% filter(!label %in% c(&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) set.seed(101) scale &lt;- 20 # scale for vector loadings (to make arrows visible) gift_pcoa_vectors %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + #genome positions scale_color_manual(values=phylum_colors)+ geom_point(aes(x=Axis.1,y=Axis.2, color=phylum, size=length), alpha=0.9, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0.1,5)) + #loading positions geom_segment(data=gift_pcoa_gifts, aes(x=0, y=0, xend=Axis.1 * scale, yend=Axis.2 * scale), arrow = arrow(length = unit(0.3, &quot;cm&quot;), type = &quot;open&quot;, angle = 25), linewidth = 0.5, color = &quot;black&quot;) + #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + geom_label_repel(data = gift_pcoa_gifts, aes(label = label, x = Axis.1 * scale, y = Axis.2 * scale), segment.color = &#39;transparent&#39;) + xlim(-3,3) + ylim(-2.5,2.5) + theme_minimal() + theme(legend.position = &quot;none&quot;)+ labs( x = paste0(&quot;PCoA1 (&quot;, round(gift_pcoa_rel_eigen[1]*100, 2), &quot; %)&quot;), y = paste0(&quot;PCoA2 (&quot;, round(gift_pcoa_rel_eigen[2]*100, 2), &quot; %)&quot;) ) Warning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`). Warning: ggrepel: 12 unlabeled data points (too many overlaps). Consider increasing max.overlaps arrow_functions &lt;- gift_pcoa_gifts %&gt;% left_join(GIFT_db, by = c(&quot;label&quot; = &quot;Code_function&quot;)) %&gt;% group_by(label) %&gt;% summarise( Axis.1 = mean(Axis.1), Axis.2 = mean(Axis.2), Function = first(Function), Domain = first(Domain), Length = sqrt(Axis.1^2 + Axis.2^2), # vector length .groups = &quot;drop&quot; ) %&gt;% arrange(desc(Length)) # sort so most important arrows are first arrow_functions # A tibble: 18 × 6 label Axis.1 Axis.2 Function Domain Length &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02 0.119 -0.0345 Amino acid biosynthesis Biosynthesis 0.124 2 B07 0.0905 0.0708 Vitamin biosynthesis Biosynthesis 0.115 3 B01 0.0805 0.0477 Nucleic acid biosynthesis Biosynthesis 0.0936 4 D09 0.00454 -0.0913 Antibiotic degradation Degradation 0.0914 5 B06 0.0774 0.0195 Organic anion biosynthesis Biosynthesis 0.0798 6 B03 0.0302 -0.0148 Amino acid derivative biosynthesis Biosynthesis 0.0336 7 D01 0.00244 -0.0100 Lipid degradation Degradation 0.0103 8 D03 0.00248 -0.00530 Sugar degradation Degradation 0.00586 9 D05 0.00466 0.00234 Amino acid degradation Degradation 0.00521 10 D06 0.00255 0.00355 Nitrogen compound degradation Degradation 0.00437 11 D08 0.00261 -0.00107 Xenobiotic degradation Degradation 0.00282 12 B04 -0.000742 -0.00219 SCFA biosynthesis Biosynthesis 0.00231 13 B09 0.000491 -0.000896 Metallophore biosynthesis Biosynthesis 0.00102 14 B10 0.0000905 -0.0000140 Antibiotic biosynthesis Biosynthesis 0.0000916 15 B08 0 0 Aromatic compound biosynthesis Biosynthesis 0 16 D02 0 0 Polysaccharide degradation Degradation 0 17 D04 0 0 Protein degradation Degradation 0 18 D07 0 0 Alcohol degradation Degradation 0 PCoA with Bray-Curtis (relative composition) gift_pcoa_bray &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% vegdist(method=&quot;bray&quot;) %&gt;% pcoa() Warning in vegdist(., method = &quot;bray&quot;): you have empty rows: their dissimilarities may be meaningless in method &quot;bray&quot; gift_pcoa_rel_eigen_bray &lt;- gift_pcoa_bray$values$Relative_eig[1:10] # Get genome positions gift_pcoa_vectors_bray &lt;- gift_pcoa_bray$vectors %&gt;% #extract vectors as.data.frame() %&gt;% select(Axis.1,Axis.2) # keep the first 2 axes gift_pcoa_eigenvalues_bray &lt;- gift_pcoa_bray$values$Eigenvalues[c(1,2)] gift_pcoa_gifts_bray &lt;- cov(genome_gifts, scale(gift_pcoa_vectors_bray)) %*% diag((gift_pcoa_eigenvalues_bray/(nrow(genome_gifts)-1))^(-0.5)) %&gt;% as.data.frame() %&gt;% rename(Axis.1=1,Axis.2=2) %&gt;% rownames_to_column(var=&quot;label&quot;) %&gt;% #get function summary vectors mutate(func=substr(label,1,3)) %&gt;% group_by(func) %&gt;% summarise(Axis.1=mean(Axis.1), Axis.2=mean(Axis.2)) %&gt;% rename(label=func) %&gt;% filter(!label %in% c(&quot;S01&quot;,&quot;S02&quot;,&quot;S03&quot;)) set.seed(101) scale &lt;- 20 # scale for vector loadings gift_pcoa_vectors_bray %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=&quot;genome&quot;) %&gt;% ggplot() + #genome positions scale_color_manual(values=phylum_colors)+ geom_point(aes(x=Axis.1,y=Axis.2, color=phylum, size=length), alpha=0.9, shape=16) + #scale_color_manual(values=phylum_colors) + scale_size_continuous(range = c(0.1,5)) + #loading positions geom_segment(data=gift_pcoa_gifts_bray, aes(x=0, y=0, xend=Axis.1 * scale, yend=Axis.2 * scale), arrow = arrow(length = unit(0.3, &quot;cm&quot;), type = &quot;open&quot;, angle = 25), linewidth = 0.5, color = &quot;black&quot;) + #Primary and secondary scale adjustments scale_x_continuous(name = paste0(&quot;PCoA1 (&quot;,round(gift_pcoa_rel_eigen_bray[1]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA1&quot;) ) + scale_y_continuous(name = paste0(&quot;PCoA2 (&quot;,round(gift_pcoa_rel_eigen_bray[2]*100, digits = 2), &quot; %)&quot;), sec.axis = sec_axis(~ . / scale, name = &quot;Loadings on PCoA2&quot;) ) + geom_label_repel(data = gift_pcoa_gifts_bray, aes(label = label, x = Axis.1 * scale, y = Axis.2 * scale), segment.color = &#39;transparent&#39;) + xlim(-0.8,0.8) + ylim(-0.5,0.5) + theme_minimal() + theme(legend.position = &quot;none&quot;)+ labs( x = paste0(&quot;PCoA1 (&quot;, round(gift_pcoa_rel_eigen[1]*100, 2), &quot; %)&quot;), y = paste0(&quot;PCoA2 (&quot;, round(gift_pcoa_rel_eigen[2]*100, 2), &quot; %)&quot;) ) Warning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`). Warning: Removed 9 rows containing missing values or values outside the scale range (`geom_segment()`). Warning: Removed 9 rows containing missing values or values outside the scale range (`geom_label_repel()`). arrow_functions_bray &lt;- gift_pcoa_gifts_bray %&gt;% left_join(GIFT_db, by = c(&quot;label&quot; = &quot;Code_function&quot;)) %&gt;% group_by(label) %&gt;% summarise( Axis.1 = mean(Axis.1), Axis.2 = mean(Axis.2), Function = first(Function), Domain = first(Domain), Length = sqrt(Axis.1^2 + Axis.2^2), .groups = &quot;drop&quot; ) %&gt;% arrange(desc(Length)) arrow_functions_bray # A tibble: 18 × 6 label Axis.1 Axis.2 Function Domain Length &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02 0.912 0.444 Amino acid biosynthesis Biosynthesis 1.01 2 B07 0.794 -0.455 Vitamin biosynthesis Biosynthesis 0.915 3 D09 0.00697 0.864 Antibiotic degradation Degradation 0.864 4 B01 0.736 -0.152 Nucleic acid biosynthesis Biosynthesis 0.752 5 B06 0.605 -0.0718 Organic anion biosynthesis Biosynthesis 0.609 6 B03 0.236 0.170 Amino acid derivative biosynthesis Biosynthesis 0.291 7 D01 -0.0146 0.0836 Lipid degradation Degradation 0.0849 8 D03 0.0182 0.0481 Sugar degradation Degradation 0.0514 9 D05 0.0428 -0.0105 Amino acid degradation Degradation 0.0441 10 D06 0.0212 -0.0183 Nitrogen compound degradation Degradation 0.0280 11 D08 0.0199 0.0195 Xenobiotic degradation Degradation 0.0279 12 B04 -0.0124 0.0191 SCFA biosynthesis Biosynthesis 0.0227 13 B09 0.00328 0.00980 Metallophore biosynthesis Biosynthesis 0.0103 14 B10 0.000699 0.000633 Antibiotic biosynthesis Biosynthesis 0.000943 15 B08 0 0 Aromatic compound biosynthesis Biosynthesis 0 16 D02 0 0 Polysaccharide degradation Degradation 0 17 D04 0 0 Protein degradation Degradation 0 18 D07 0 0 Alcohol degradation Degradation 0 UMAP set.seed(1001) #parameters to test neighbors_values &lt;- c(5, 15, 30) min_dist_values &lt;- c(0.1, 0.3, 0.5) umap_plots &lt;- list() # Loop over combinations for (nn in neighbors_values) { for (md in min_dist_values) { umap_result &lt;- umap(function_table, n_neighbors = nn, min_dist = md, metric = &quot;euclidean&quot;) df_umap &lt;- as.data.frame(umap_result) %&gt;% mutate(genome = rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(UMAP1 = V1, UMAP2 = V2) p &lt;- ggplot(df_umap, aes(x = UMAP1, y = UMAP2, color = phylum, size = length)) + geom_point(alpha = 0.7, shape=16) + scale_color_manual(values = phylum_colors) + theme_minimal() + labs(title = paste0(&quot;UMAP (neighbors=&quot;, nn, &quot;, min_dist=&quot;, md, &quot;)&quot;), color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) p &lt;- p + theme(legend.position = &quot;none&quot;) umap_plots[[paste(nn, md, sep=&quot;_&quot;)]] &lt;- p } } ggpubr::ggarrange(plotlist = umap_plots, ncol = 3, nrow = 3) set.seed(1001) # Trying different perplexity values perplexities &lt;- c(5, 7,8, 9, 10, 11, 12, 13, 15) plots &lt;- lapply(perplexities, function(p) { tsne_result &lt;- Rtsne( X = function_table, dims = 2, perplexity = p, check_duplicates = FALSE ) tsne_df &lt;- as.data.frame(tsne_result$Y) %&gt;% mutate(genome = rownames(function_table)) %&gt;% inner_join(genome_metadata, by = &quot;genome&quot;) %&gt;% rename(tSNE1 = &quot;V1&quot;, tSNE2 = &quot;V2&quot;) ggplot(tsne_df, aes(x = tSNE1, y = tSNE2, color = phylum)) + geom_point(alpha = 0.7, size = 2) + scale_color_manual(values=phylum_colors)+ theme_minimal(base_size = 5) + theme(legend.position = &quot;none&quot;) + # remove legend labs(title = paste(&quot;Perplexity =&quot;, p)) }) ggpubr::ggarrange(plotlist = plots, ncol = 3, nrow = 3) nrow(function_table) [1] 144 # Generate the tSNE ordination set.seed(1001) tSNE_function &lt;- Rtsne(X=function_table, dims = 2, perplexity = 10, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Core microbiota", " Chapter 5 Community composition 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_grid(. ~ gut_location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ gut_location + fox_behaviour, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ fox_behaviour + gut_location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ fox_behaviour + sample_type, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ sample_type+ fox_behaviour, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,fox_behaviour) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T), tame_mean=mean(relabun[fox_behaviour ==&quot;tame&quot;]*100, na.rm=T), tame_sd=sd(relabun[fox_behaviour ==&quot;tame&quot;]*100, na.rm=T), aggressive_mean=mean(relabun[fox_behaviour ==&quot;aggr&quot;]*100, na.rm=T), aggressive_sd=sd(relabun[fox_behaviour==&quot;aggr&quot;]*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2)), tame=str_c(round(tame_mean,2),&quot;±&quot;,round(tame_sd,2)), aggresive=str_c(round(aggressive_mean,2),&quot;±&quot;,round(aggressive_sd,2))) %&gt;% arrange(-total_mean) %&gt;% select(phylum,total,tame,aggresive) %&gt;% tt() .table td.tinytable_css_y7kkz0uj2g26zfm6hhe6, .table th.tinytable_css_y7kkz0uj2g26zfm6hhe6 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_xvexi9jnk9vylyazuwue, .table th.tinytable_css_xvexi9jnk9vylyazuwue { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } phylum total tame aggresive Bacillota_A 53.84±36.19 58.59±35.17 50.48±39.83 Bacteroidota 15.25±19.97 9.6±16.51 16.34±20.1 Bacillota 12.28±22.53 15.11±24.53 12.65±24.9 Fusobacteriota 4.95±6.83 4.36±7.66 5.36±6.89 Pseudomonadota 4.22±13.86 2.75±5.01 6.73±21.62 Bacillota_I 2.76±3.46 1.45±2.48 2.68±2.84 Campylobacterota 2.69±4.84 3.2±4.91 2.27±5.02 Desulfobacterota 1.45±7.98 3.15±12.05 0.05±0.11 Spirochaetota 0.91±2.5 0.35±1.12 1.94±3.64 Deferribacterota 0.73±1.38 0.66±1.11 0.52±1.29 Bacillota_C 0.67±0.9 0.51±0.87 0.69±0.88 Actinomycetota 0.21±0.37 0.18±0.31 0.26±0.48 Bacillota_B 0.04±0.09 0.05±0.1 0.03±0.06 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% dplyr::select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_nested(. ~ gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 10), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)) ) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.1.3 Family `summarise()` has grouped output by &#39;sample&#39;, &#39;family&#39;. You can override using the `.groups` argument. .table td.tinytable_css_p55o7vaetdjypmqafdam, .table th.tinytable_css_p55o7vaetdjypmqafdam { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_e1y1i2vba6ez8ivl5gw2, .table th.tinytable_css_e1y1i2vba6ez8ivl5gw2 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } family total tame aggr Peptostreptococcaceae 45.03±42.9 48.09±43.82 44.45±44.89 Bacteroidaceae 14.24±18.56 9±15.28 14.97±18.23 Lactobacillaceae 9.31±16.8 13.65±22.13 7.06±12.19 Fusobacteriaceae 4.95±6.83 4.36±7.66 5.36±6.89 Lachnospiraceae 4.29±6.04 3.43±6.01 4.38±6.09 Clostridiaceae 3.1±10.53 6.24±15.54 0.36±0.53 Streptococcaceae 2.9±8.69 1.46±2.66 5.44±13.42 Enterobacteriaceae 2.04±5.98 1.97±4.82 2.57±8.17 Helicobacteraceae 1.93±3.97 1.76±3.39 1.94±4.4 Mycoplasmoidaceae 1.78±3.5 0.9±2.51 1.58±2.76 CAMWXW01 1.36±7.99 3.12±12.06 0.02±0.08 Pasteurellaceae 1.32±8.53 0±0 3.37±13.61 Brachyspiraceae 0.91±2.5 0.35±1.12 1.94±3.64 Campylobacteraceae 0.76±1.77 1.45±2.39 0.33±0.97 Mucispirillaceae 0.73±1.38 0.66±1.11 0.52±1.29 Acidaminococcaceae 0.67±0.9 0.51±0.87 0.69±0.88 Oscillospiraceae 0.62±0.9 0.31±0.53 0.56±0.74 Burkholderiaceae 0.6±0.84 0.57±0.89 0.46±0.71 Muribaculaceae 0.58±1.07 0.23±0.44 0.99±1.55 Erysipelotrichaceae 0.53±0.75 0.37±0.66 0.58±0.77 Ruminococcaceae 0.41±0.67 0.41±0.84 0.39±0.58 UBA932 0.23±0.41 0.19±0.49 0.22±0.35 Coprobacillaceae 0.23±0.46 0.12±0.24 0.32±0.65 Succinivibrionaceae 0.18±0.37 0.14±0.37 0.27±0.44 Anaeroplasmataceae 0.16±0.34 0.07±0.23 0.2±0.44 Marinifilaceae 0.14±0.3 0.16±0.37 0.1±0.17 CAG-465 0.13±0.38 0.03±0.07 0.07±0.21 CAG-508 0.12±0.27 0.03±0.07 0.12±0.28 Coriobacteriaceae 0.09±0.28 0.05±0.15 0.17±0.41 CAG-239 0.09±0.19 0.07±0.21 0.06±0.15 Bifidobacteriaceae 0.09±0.23 0.09±0.25 0.09±0.23 Desulfovibrionaceae 0.08±0.19 0.03±0.08 0.03±0.09 UBA660 0.07±0.26 0±0 0±0 Tannerellaceae 0.06±0.13 0.02±0.07 0.06±0.15 Anaerotignaceae 0.05±0.14 0.02±0.06 0.1±0.21 Aristaeellaceae 0.05±0.14 0.01±0.03 0.02±0.04 Enterococcaceae 0.04±0.13 0.01±0.03 0.08±0.19 Peptococcaceae 0.04±0.09 0.05±0.1 0.03±0.06 Eggerthellaceae 0.03±0.08 0.04±0.1 0.01±0.02 Butyricicoccaceae 0.03±0.08 0.01±0.07 0.02±0.04 Turicibacteraceae 0.03±0.11 0±0 0.07±0.17 Anaerovoracaceae 0.01±0.04 0.01±0.04 0.01±0.02 CAG-826 0±0.01 0±0.01 0±0.01 family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.1.4 Genus `summarise()` has grouped output by &#39;sample&#39;, &#39;genus&#39;. You can override using the `.groups` argument. .table td.tinytable_css_ud5gcrgy6eehlea5am6a, .table th.tinytable_css_ud5gcrgy6eehlea5am6a { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_zwpowaxnsb6a7wy7x5tp, .table th.tinytable_css_zwpowaxnsb6a7wy7x5tp { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } genus total tame aggr Paraclostridium 44.77±42.86 47.88±44.04 44.02±44.54 Bacteroides 5.72±8 2.83±4.62 5.8±6.72 Limosilactobacillus 5.1±9.73 5.91±10.31 5.41±11.11 Phocaeicola 3.83±5.4 2.45±4.54 5.12±6.63 Lactobacillus 3.54±8.66 6.99±12.38 0.94±1.41 Fusobacterium_A 3.22±4.67 3.04±5.44 3.36±4.56 Sarcina 2.71±9.12 5.38±13.47 0.33±0.49 Lactococcus 2.34±8.57 1.09±2.22 4.51±13.44 Paraprevotella 2.23±3.46 2.3±4.06 1.33±2.3 Alloprevotella 2.07±2.93 1.14±2.01 2.45±3.51 Mycoplasmoides 1.78±3.5 0.9±2.51 1.58±2.76 Escherichia 1.74±5.83 1.4±4.34 2.44±8.19 Fusobacterium_B 1.67±2.21 1.32±2.25 1.85±2.32 CAMWXW01 1.36±7.99 3.12±12.06 0.02±0.08 Canicola 1.32±8.53 0±0 3.37±13.61 Blautia 1.2±1.74 1.09±1.91 1.25±1.8 Blautia_A 1.01±1.57 0.66±1.17 1.18±1.87 Brachyspira 0.91±2.5 0.35±1.12 1.94±3.64 Helicobacter_A 0.9±2.2 0.64±1.34 0.59±1.02 Campylobacter_D 0.76±1.77 1.45±2.39 0.33±0.97 Helicobacter_C 0.75±2.24 0.96±2.1 0.86±2.84 Mucispirillum 0.73±1.38 0.66±1.11 0.52±1.29 Phascolarctobacterium_A 0.67±0.9 0.51±0.87 0.69±0.88 Ligilactobacillus 0.64±1.09 0.69±1.08 0.69±1.26 Faecousia 0.6±0.88 0.3±0.53 0.55±0.73 Sutterella 0.6±0.84 0.57±0.89 0.46±0.71 Limisoma 0.58±1.07 0.23±0.44 0.99±1.55 Faecalimonas 0.57±0.89 0.44±0.88 0.48±0.73 Streptococcus 0.56±1.09 0.36±0.65 0.93±1.54 Clostridium 0.39±1.43 0.86±2.11 0.03±0.05 Faecalibacterium 0.33±0.58 0.35±0.72 0.33±0.52 Plesiomonas 0.31±0.97 0.57±1.35 0.13±0.53 Helicobacter_B 0.28±1.27 0.15±0.44 0.49±1.99 Faecalimicrobium 0.26±1.02 0.2±0.66 0.44±1.48 Otoolea 0.24±0.36 0.25±0.43 0.16±0.25 Cryptobacteroides 0.23±0.41 0.19±0.49 0.22±0.35 Oliverpabstia 0.21±0.42 0.19±0.4 0.28±0.5 Allobaculum 0.2±0.32 0.12±0.23 0.3±0.42 Prevotella 0.19±0.49 0.22±0.6 0.15±0.45 Anaerobiospirillum 0.17±0.37 0.14±0.37 0.25±0.43 Holdemanella 0.16±0.33 0.2±0.45 0.12±0.24 Brotaphodocola 0.16±0.28 0.08±0.22 0.12±0.2 CALUXS01 0.16±0.34 0.07±0.23 0.2±0.44 OM05-12 0.15±0.39 0.04±0.17 0.06±0.13 Odoribacter 0.14±0.3 0.16±0.37 0.1±0.17 UBA9414 0.14±0.24 0.16±0.29 0.07±0.13 0.13±0.38 0.03±0.07 0.07±0.21 Faecalibacillus 0.13±0.42 0.04±0.09 0.27±0.64 JAHHTG01 0.12±0.38 0±0 0.13±0.34 JAGZHZ01 0.11±0.23 0.11±0.25 0.1±0.19 HGM12587 0.1±0.23 0.02±0.07 0.08±0.19 Gallintestinimicrobium 0.09±0.14 0.08±0.14 0.11±0.16 Collinsella 0.09±0.28 0.05±0.15 0.17±0.41 UMGS1370 0.09±0.16 0.08±0.17 0.11±0.16 51-20 0.09±0.19 0.07±0.21 0.06±0.15 Bifidobacterium 0.09±0.23 0.09±0.25 0.09±0.23 Taurinivorans 0.08±0.19 0.03±0.08 0.03±0.09 Frisingicoccus 0.07±0.22 0.08±0.2 0.1±0.28 UBA3789 0.07±0.26 0±0 0±0 Marvinbryantia 0.07±0.17 0.03±0.08 0.07±0.15 CAG-269 0.07±0.16 0±0.02 0.1±0.2 Schaedlerella 0.06±0.12 0.04±0.1 0.06±0.14 Cetobacterium_A 0.06±0.39 0±0 0.15±0.62 Parabacteroides 0.06±0.13 0.02±0.07 0.06±0.15 Ventricola 0.05±0.14 0.01±0.03 0.02±0.04 Phocaeicola_A 0.05±0.12 0.02±0.1 0.06±0.13 CALVGN01 0.05±0.08 0.05±0.1 0.03±0.05 Enterococcus 0.04±0.13 0.01±0.03 0.08±0.19 CAJMNU01 0.04±0.11 0.02±0.06 0.07±0.16 UMGS1590 0.04±0.09 0.05±0.1 0.03±0.06 CALDMQ01 0.04±0.1 0.06±0.14 0.02±0.04 Negativibacillus 0.04±0.09 0.02±0.06 0.02±0.05 Fimiplasma 0.04±0.15 0±0 0±0 Avimicrobium 0.04±0.08 0.04±0.1 0.03±0.06 Anaerotignum 0.03±0.08 0.02±0.05 0.06±0.11 Slackia 0.03±0.08 0.04±0.1 0.01±0.02 Avilachnospira 0.03±0.06 0.03±0.07 0.03±0.06 Butyricicoccus 0.03±0.08 0.01±0.07 0.02±0.04 Latilactobacillus 0.03±0.1 0.05±0.15 0.02±0.04 Turicibacter 0.03±0.11 0±0 0.07±0.17 Laedolimicola 0.03±0.07 0.01±0.03 0.04±0.1 UMGS1663 0.03±0.1 0±0 0±0 Choladousia 0.03±0.07 0.01±0.04 0.05±0.11 Merdicola 0.02±0.07 0.03±0.07 0.03±0.08 Beduini 0.02±0.06 0.02±0.06 0.03±0.07 Metalachnospira 0.02±0.07 0.01±0.02 0.04±0.1 Alitiscatomonas 0.02±0.04 0.01±0.03 0.02±0.04 Dorea_B 0.02±0.04 0.03±0.06 0±0.01 Ruminococcus_B 0.01±0.05 0.02±0.08 0.01±0.02 Evtepia 0.01±0.05 0±0.02 0.01±0.03 Gallibacter 0.01±0.04 0.01±0.04 0.01±0.02 Succinivibrio 0.01±0.03 0±0 0.02±0.05 Onthovivens 0±0.01 0±0.01 0±0.01 genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~ gut_location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~fox_behaviour)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2 Core microbiota library(UpSetR) genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(., &quot;genome&quot;) #Presence/absence genome_counts_rel_pa &lt;- (genome_counts_rel &gt; 0) * 1 #Add gut_location info df &lt;- as.data.frame(t(genome_counts_rel_pa)) %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata, by=&quot;sample&quot;) #Summarize by location table_upset_analysis &lt;- df %&gt;% group_by(gut_location) %&gt;% summarise(across(-sample, ~ as.integer(any(. &gt; 0)))) %&gt;% column_to_rownames(&quot;gut_location&quot;) %&gt;% t() %&gt;% as.data.frame() #UpSet plot upset(table_upset_analysis, keep.order = TRUE, sets = rev(c(&quot;F_colon&quot;, &quot;M_colon&quot;, &quot;D_ileum&quot;, &quot;K_ileum&quot;)), sets.bar.color = rev(location_colors[1:4]), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) mag_prevalence_location &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% select(genome,sample,presence,gut_location, sample_type) %&gt;% group_by(genome,gut_location, sample_type) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) %&gt;% group_by(genome,sample_type) %&gt;% summarise(presence=sum(presence)) mag_prevalence_location %&gt;% group_by(sample_type) %&gt;% summarise(mean=mean(presence),sd=sd(presence)) %&gt;% tt() .table td.tinytable_css_kuxoi6xo88t3i37o4b4y, .table th.tinytable_css_kuxoi6xo88t3i37o4b4y { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_27gjmz5uygctwagn8jrp, .table th.tinytable_css_27gjmz5uygctwagn8jrp { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } sample_type mean sd Gut content 1.8601399 0.3480610 Gut tissue 0.7552448 0.4924326 wilcox.test(presence ~ sample_type, data=mag_prevalence_location) %&gt;% tidy() # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 19123 5.12e-44 Wilcoxon rank sum test with continuity correction two.sided mag_prevalence_location %&gt;% ggplot(aes(x=sample_type,y=presence, color=sample_type, fill=sample_type)) + geom_boxplot() + geom_jitter() + scale_color_manual(values=origin_colors) + scale_fill_manual(values=str_c(origin_colors,&quot;50&quot;)) + theme_minimal() mag_prevalence_location &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(!grepl(&quot;unsel&quot;, fox_behaviour))%&gt;% #to remove the rows with &quot;unsel&quot; mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% select(genome,sample,presence,gut_location, fox_behaviour) %&gt;% group_by(genome,gut_location, fox_behaviour) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) %&gt;% group_by(genome,fox_behaviour) %&gt;% summarise(presence=sum(presence)) mag_prevalence_location %&gt;% group_by(fox_behaviour) %&gt;% summarise(mean=mean(presence),sd=sd(presence)) %&gt;% tt() .table td.tinytable_css_tnl9d6gaunf09gh6pago, .table th.tinytable_css_tnl9d6gaunf09gh6pago { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_nhudz39v24lt3vw1j7yt, .table th.tinytable_css_nhudz39v24lt3vw1j7yt { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } fox_behaviour mean sd aggr 2.321678 0.8101591 tame 1.566434 0.7922107 wilcox.test(presence ~ fox_behaviour, data=mag_prevalence_location) %&gt;% tidy() # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 15248 2.69e-14 Wilcoxon rank sum test with continuity correction two.sided mag_prevalence_location %&gt;% ggplot(aes(x=fox_behaviour,y=presence, color=fox_behaviour, fill=fox_behaviour)) + geom_boxplot() + geom_jitter() + scale_color_manual(values=origin_colors) + scale_fill_manual(values=str_c(origin_colors,&quot;50&quot;)) + theme_minimal() "],["alpha-diversity.html", "Chapter 6 Alpha diversity 6.1 Summary table 6.2 Aggressive vs Tame 6.3 Captive-bred: pre-grass vs post-grass", " Chapter 6 Alpha diversity load(&quot;data/data.Rdata&quot;) Colours (change later- place in data preparation) fox_behaviour_colors &lt;- c(&quot;#bd70ae&quot;,&quot;#949293&quot;, &quot;#32CD32&quot;) 6.1 Summary table # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # # Aggregate basal GIFT into elements genome_counts_filt &lt;- genome_counts_filt[genome_counts_filt$genome %in% rownames(genome_gifts),] genome_counts_filt &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0))%&gt;% rownames_to_column(., &quot;genome&quot;) genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] genome_gifts &lt;- genome_gifts[, colSums(genome_gifts != 0) &gt; 0] dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample))%&gt;% full_join(functional, by = join_by(sample == sample)) .table td.tinytable_css_dpdmahapt8f5gavscq6d, .table th.tinytable_css_dpdmahapt8f5gavscq6d { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_maihoqycd2z6nv9dncr6, .table th.tinytable_css_maihoqycd2z6nv9dncr6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } alpha aggr tame unsel richness 38.89±45.23 29.4±39.37 51.25±45.54 neutral 16.43±18.23 14.11±17.85 22.02±19.84 phylogenetic 3.48±2.55 3.14±2.45 4.34±2.48 functional 1.29±0.22 1.29±0.24 1.37±0.21 6.2 Aggressive vs Tame 6.2.1 Shapiro test alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% summarize(shapiro_p_value = shapiro.test(value)$p.value) %&gt;% pull(shapiro_p_value) [1] 1.321122e-06 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% summarize(shapiro_p_value = shapiro.test(value)$p.value) %&gt;% pull(shapiro_p_value) [1] 2.378674e-06 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% summarize(shapiro_p_value = shapiro.test(value)$p.value) %&gt;% pull(shapiro_p_value) [1] 3.212873e-06 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% summarize(var.test_p_value_phylo = var.test(value ~ fox_behaviour)$p.value) # A tibble: 1 × 1 var.test_p_value_phylo &lt;dbl&gt; 1 0.863 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% summarize(shapiro_p_value = shapiro.test(value)$p.value) %&gt;% pull(shapiro_p_value) [1] 0.0001649414 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!fox_behaviour ==&quot;unsel&quot;) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% summarize(var.test_p_functional = var.test(value ~ fox_behaviour)$p.value) # A tibble: 1 × 1 var.test_p_functional &lt;dbl&gt; 1 0.700 6.2.2 Plots 6.3 Captive-bred: pre-grass vs post-grass 6.3.1 Plots "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
