[["index.html", "AlberdiLab | Silver fox metagenomics MSc project Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Silver fox metagenomics MSc project Irene Martínez, M Thomas P Gilbert, Antton Alberdi1 Last update: 2025-09-02 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/silverfox_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) library(janitor) library(broom) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) library(viridis) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(nlme) library(pairwiseAdonis) library(emmeans) library(pheatmap) library(rstatix) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% rename(sample =1, gut_location = 2, fox_behaviour = 3, fox_sex = 4, sample_type = 5, year = 6) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/counts.tsv&quot;) %&gt;% rename(genome=1) #%&gt;% #select(any_of(c(&quot;genome&quot;, sample_metadata$sample))) #colnames(read_counts)[which(!(colnames(read_counts) %in% sample_metadata$sample))] 2.1.3 Filter read counts read_counts &lt;- read_counts %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) #%&gt;% # select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.4 Genome info genome_info &lt;- read_csv(&quot;data/genomeInfo.csv&quot;) %&gt;% mutate(genome = gsub(&quot;.fa$&quot;, &quot;&quot;, genome)) %&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.5 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/genome_taxonomy.tsv&quot;) %&gt;% rename(genome = 1) genome_taxonomy_expanded &lt;- genome_taxonomy %&gt;% separate(classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;, fill = &quot;right&quot;, remove = FALSE) %&gt;% mutate(across(domain:species, ~ str_replace(.x, &quot;^[a-z]__&quot;, &quot;&quot;)))%&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.6 Genome metadata genome_metadata &lt;- genome_taxonomy_expanded %&gt;% left_join(genome_info, by = &quot;genome&quot;) 2.1.7 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/bases.tsv&quot;) %&gt;% rename(genome=1) %&gt;% left_join(genome_info %&gt;% select(genome, length), by = &quot;genome&quot;) %&gt;% mutate(across(where(is.numeric), ~ .x / length)) 2.1.8 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.9 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/gene_annotations.tsv.xz&quot;) %&gt;% mutate(genome = sub(&quot;\\\\^.*&quot;, &quot;&quot;, gene)) %&gt;% select(1, genome, everything()) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% select(-length) %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol= 2, annotcol=c(6,7,8,9), verbosity = F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) location_colors &lt;- c(&#39;#3D5C61&#39;,&#39;#41B6C0&#39;,&#39;#90C8C5&#39;,&#39;#E5D388&#39;,&#39;#BFA366&#39;,&#39;#6E5244&#39;) origin_colors &lt;- c(&quot;#bd70ae&quot;,&quot;#949293&quot;) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, location_colors, origin_colors, file = &quot;data/data.Rdata&quot;) "],["mag-catalogue.html", "Chapter 3 MAG catalogue", " Chapter 3 MAG catalogue "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
